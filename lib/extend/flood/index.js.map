{"version":3,"file":"index.js","sources":["src/components/extend/flood/VcFlood.vue?rollup-plugin-vue=script.js","src/components/extend/flood/VcFlood.vue","src/components/extend/flood/index.js"],"sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport cmp from '../../../mixins/virtualCmp'\nimport { makeColor } from '../../../utils/cesiumHelpers'\n\nexport default {\n  name: 'vc-analytics-flood',\n  data () {\n    return {\n      attributes: null,\n      extrudedHeight: 0.1,\n      flooding: false,\n      show: false\n    }\n  },\n  mixins: [cmp],\n  props: {\n    minHeight: {\n      type: Number,\n      default: 0\n    },\n    maxHeight: Number,\n    polygonHierarchy: Array,\n    speed: {\n      type: Number,\n      default: 10\n    },\n    color: {\n      type: [Object, Array, String],\n      default: 'rgba(40,150,200,0.6)'\n    }\n  },\n  watch: {\n    flooding (val) {\n      const listener = this.$listeners.activeEvt\n      if (val) {\n        if (this.floodDone) {\n          this.extrudedHeight = this.extrudedHeight >= this.minHeight ? this.minHeight : 0.1\n          this.floodDone = false\n        }\n        this.viewer.clock.onTick.addEventListener(this.onTick)\n        listener && this.$emit('activeEvt', { isActive: val })\n        this.show = true\n      } else {\n        this.viewer.clock.onTick.removeEventListener(this.onTick)\n        listener && this.$emit('activeEvt', { isActive: val })\n      }\n    },\n    minHeight (val) {\n      this.extrudedHeight = val\n    }\n  },\n  methods: {\n    async createCesiumObject () {\n      const { Cesium, minHeight, color } = this\n      const { ColorGeometryInstanceAttribute } = Cesium\n\n      this.attributes = {\n        color: ColorGeometryInstanceAttribute.fromColor(makeColor(color))\n      }\n      this.extrudedHeight = minHeight\n      return true\n    },\n    onTick (e) {\n      const { maxHeight, speed } = this\n      if (this.extrudedHeight < maxHeight) {\n        this.extrudedHeight += speed\n        const listener = this.$listeners.tickEvt\n        listener && this.$emit('tickEvt', { clock: e, extrudedHeight: this.extrudedHeight })\n      } else {\n        this.floodDone = true\n        this.flooding = false\n      }\n    },\n    clear () {\n      this.extrudedHeight = 0\n    },\n    async mount () {\n      return true\n    },\n    async unmount () {\n      this.extrudedHeight = this.minHeight\n      this.flooding = false\n    }\n  }\n}\n","<template>\n  <i :class=\"$options.name\" style=\"display: none !important\">\n    <vc-primitive-classification\n      :asynchronous=\"false\"\n      :show=\"extrudedHeight !== 0\"\n      ref=\"primitive\"\n    >\n      <vc-instance-geometry :attributes=\"attributes\">\n        <vc-geometry-polygon :extrudedHeight=\"extrudedHeight\" :polygonHierarchy=\"polygonHierarchy\"></vc-geometry-polygon>\n      </vc-instance-geometry>\n    </vc-primitive-classification>\n  </i>\n</template>\n<script>\nimport cmp from '../../../mixins/virtualCmp'\nimport { makeColor } from '../../../utils/cesiumHelpers'\n\nexport default {\n  name: 'vc-analytics-flood',\n  data () {\n    return {\n      attributes: null,\n      extrudedHeight: 0.1,\n      flooding: false,\n      show: false\n    }\n  },\n  mixins: [cmp],\n  props: {\n    minHeight: {\n      type: Number,\n      default: 0\n    },\n    maxHeight: Number,\n    polygonHierarchy: Array,\n    speed: {\n      type: Number,\n      default: 10\n    },\n    color: {\n      type: [Object, Array, String],\n      default: 'rgba(40,150,200,0.6)'\n    }\n  },\n  watch: {\n    flooding (val) {\n      const listener = this.$listeners.activeEvt\n      if (val) {\n        if (this.floodDone) {\n          this.extrudedHeight = this.extrudedHeight >= this.minHeight ? this.minHeight : 0.1\n          this.floodDone = false\n        }\n        this.viewer.clock.onTick.addEventListener(this.onTick)\n        listener && this.$emit('activeEvt', { isActive: val })\n        this.show = true\n      } else {\n        this.viewer.clock.onTick.removeEventListener(this.onTick)\n        listener && this.$emit('activeEvt', { isActive: val })\n      }\n    },\n    minHeight (val) {\n      this.extrudedHeight = val\n    }\n  },\n  methods: {\n    async createCesiumObject () {\n      const { Cesium, minHeight, color } = this\n      const { ColorGeometryInstanceAttribute } = Cesium\n\n      this.attributes = {\n        color: ColorGeometryInstanceAttribute.fromColor(makeColor(color))\n      }\n      this.extrudedHeight = minHeight\n      return true\n    },\n    onTick (e) {\n      const { maxHeight, speed } = this\n      if (this.extrudedHeight < maxHeight) {\n        this.extrudedHeight += speed\n        const listener = this.$listeners.tickEvt\n        listener && this.$emit('tickEvt', { clock: e, extrudedHeight: this.extrudedHeight })\n      } else {\n        this.floodDone = true\n        this.flooding = false\n      }\n    },\n    clear () {\n      this.extrudedHeight = 0\n    },\n    async mount () {\n      return true\n    },\n    async unmount () {\n      this.extrudedHeight = this.minHeight\n      this.flooding = false\n    }\n  }\n}\n</script>\n","import VcFlood from './VcFlood.vue'\n// 按需引入该组件时自动引入下面组件才能正常工作\nimport * as ClassificationPrimitive from '../../primitive/classification'\nimport * as GeometryInstance from '../../geometryInstance'\nimport * as PolygonGeometry from '../../geometryInstance/polygon'\n\nfunction plugin (Vue, options = {}) {\n  if (plugin.installed) {\n    return\n  }\n  plugin.installed = true\n\n  Vue.use(ClassificationPrimitive)\n  Vue.use(GeometryInstance)\n  Vue.use(PolygonGeometry)\n\n  Vue.component(VcFlood.name, VcFlood)\n}\n\nexport default plugin\n\nexport {\n  VcFlood,\n  plugin as install\n}\n"],"names":["name","data","attributes","extrudedHeight","flooding","show","mixins","cmp","props","minHeight","type","Number","default","maxHeight","polygonHierarchy","Array","speed","color","Object","String","watch","val","listener","$listeners","activeEvt","floodDone","viewer","clock","onTick","addEventListener","$emit","isActive","removeEventListener","methods","createCesiumObject","Cesium","ColorGeometryInstanceAttribute","fromColor","makeColor","e","tickEvt","clear","mount","unmount","plugin","Vue","installed","use","ClassificationPrimitive","GeometryInstance","PolygonGeometry","component","VcFlood"],"mappings":"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"}