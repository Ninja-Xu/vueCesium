{"version":3,"file":"CameraFlightPath.js","sources":["src/exts/CameraFlightPath.js"],"sourcesContent":["\n/**\n * Creates tweens for camera flights.\n * <br /><br />\n * Mouse interaction is disabled during flights.\n *\n * @private\n */\nconst CameraFlightPath = {}\n\nfunction getAltitude (frustum, dx, dy) {\n  const { PerspectiveFrustum, PerspectiveOffCenterFrustum } = Cesium\n  let near\n  let top\n  let right\n  if (frustum instanceof PerspectiveFrustum) {\n    const tanTheta = Math.tan(0.5 * frustum.fovy)\n    near = frustum.near\n    top = frustum.near * tanTheta\n    right = frustum.aspectRatio * top\n    return Math.max((dx * near) / right, (dy * near) / top)\n  } else if (frustum instanceof PerspectiveOffCenterFrustum) {\n    near = frustum.near\n    top = frustum.top\n    right = frustum.right\n    return Math.max((dx * near) / right, (dy * near) / top)\n  }\n\n  return Math.max(dx, dy)\n}\n\nconst scratchCart = {}\nconst scratchCart2 = {}\n\nfunction createPitchFunction (startPitch, endPitch, heightFunction, pitchAdjustHeight) {\n  const { defined, Math: CesiumMath } = Cesium\n  if (defined(pitchAdjustHeight) && heightFunction(0.5) > pitchAdjustHeight) {\n    const startHeight = heightFunction(0.0)\n    const endHeight = heightFunction(1.0)\n    const middleHeight = heightFunction(0.5)\n\n    const d1 = middleHeight - startHeight\n    const d2 = middleHeight - endHeight\n\n    return function (time) {\n      const altitude = heightFunction(time)\n      if (time <= 0.5) {\n        const t1 = (altitude - startHeight) / d1\n        return CesiumMath.lerp(startPitch, -CesiumMath.PI_OVER_TWO, t1)\n      }\n\n      const t2 = (altitude - endHeight) / d2\n      return CesiumMath.lerp(-CesiumMath.PI_OVER_TWO, endPitch, 1 - t2)\n    }\n  }\n  return function (time) {\n    return CesiumMath.lerp(startPitch, endPitch, time)\n  }\n}\n\nfunction createHeightFunction (camera, destination, startHeight, endHeight, optionAltitude) {\n  const { Cartesian3, defined, Math: CesiumMath } = Cesium\n  let altitude = optionAltitude\n  const maxHeight = Math.max(startHeight, endHeight)\n\n  if (!defined(altitude)) {\n    const start = camera.position\n    const end = destination\n    const up = camera.up\n    const right = camera.right\n    const frustum = camera.frustum\n\n    const diff = Cartesian3.subtract(start, end, scratchCart)\n    const verticalDistance = Cartesian3.magnitude(Cartesian3.multiplyByScalar(up, Cartesian3.dot(diff, up), scratchCart2))\n    const horizontalDistance = Cartesian3.magnitude(Cartesian3.multiplyByScalar(right, Cartesian3.dot(diff, right), scratchCart2))\n\n    altitude = Math.min(getAltitude(frustum, verticalDistance, horizontalDistance) * 0.2, 1000000000.0)\n  }\n\n  if (maxHeight < altitude) {\n    const power = 8.0\n    const factor = 1000000.0\n\n    const s = -Math.pow((altitude - startHeight) * factor, 1.0 / power)\n    const e = Math.pow((altitude - endHeight) * factor, 1.0 / power)\n\n    return function (t) {\n      const x = t * (e - s) + s\n      return -Math.pow(x, power) / factor + altitude\n    }\n  }\n\n  return function (t) {\n    return CesiumMath.lerp(startHeight, endHeight, t)\n  }\n}\n\nfunction adjustAngleForLERP (startAngle, endAngle) {\n  const { Math: CesiumMath } = Cesium\n  if (CesiumMath.equalsEpsilon(startAngle, CesiumMath.TWO_PI, CesiumMath.EPSILON11)) {\n    startAngle = 0.0\n  }\n\n  if (endAngle > startAngle + Math.PI) {\n    startAngle += CesiumMath.TWO_PI\n  } else if (endAngle < startAngle - Math.PI) {\n    startAngle -= CesiumMath.TWO_PI\n  }\n\n  return startAngle\n}\n\nconst scratchStart = {}\n\nfunction createUpdateCV (scene, duration, destination, heading, pitch, roll, optionAltitude) {\n  const { Cartesian2, Cartesian3, Math: CesiumMath } = Cesium\n  const camera = scene.camera\n\n  const start = Cartesian3.clone(camera.position, scratchStart)\n  const startPitch = camera.pitch\n  const startHeading = adjustAngleForLERP(camera.heading, heading)\n  const startRoll = adjustAngleForLERP(camera.roll, roll)\n\n  const heightFunction = createHeightFunction(camera, destination, start.z, destination.z, optionAltitude)\n\n  function update (value) {\n    const time = value.time / duration\n\n    camera.setView({\n      orientation: {\n        heading: CesiumMath.lerp(startHeading, heading, time),\n        pitch: CesiumMath.lerp(startPitch, pitch, time),\n        roll: CesiumMath.lerp(startRoll, roll, time)\n      }\n    })\n\n    Cartesian2.lerp(start, destination, time, camera.position)\n    camera.position.z = heightFunction(time)\n  }\n  return update\n}\n\nfunction useLongestFlight (startCart, destCart) {\n  const { Math: CesiumMath } = Cesium\n  if (startCart.longitude < destCart.longitude) {\n    startCart.longitude += CesiumMath.TWO_PI\n  } else {\n    destCart.longitude += CesiumMath.TWO_PI\n  }\n}\n\nfunction useShortestFlight (startCart, destCart) {\n  const { Math: CesiumMath } = Cesium\n  const diff = startCart.longitude - destCart.longitude\n  if (diff < -CesiumMath.PI) {\n    startCart.longitude += CesiumMath.TWO_PI\n  } else if (diff > CesiumMath.PI) {\n    destCart.longitude += CesiumMath.TWO_PI\n  }\n}\n\nconst scratchStartCart = {}\nconst scratchEndCart = {}\n\nfunction createUpdate3D (\n  scene,\n  duration,\n  destination,\n  heading,\n  pitch,\n  roll,\n  optionAltitude,\n  optionFlyOverLongitude,\n  optionFlyOverLongitudeWeight,\n  optionPitchAdjustHeight\n) {\n  const { Cartesian3, Cartographic, defined, Math: CesiumMath } = Cesium\n  const camera = scene.camera\n  const projection = scene.mapProjection\n  const ellipsoid = projection.ellipsoid\n\n  const startCart = Cartographic.clone(camera.positionCartographic, scratchStartCart)\n  const startPitch = camera.pitch\n  const startHeading = adjustAngleForLERP(camera.heading, heading)\n  const startRoll = adjustAngleForLERP(camera.roll, roll)\n\n  const destCart = ellipsoid.cartesianToCartographic(destination, scratchEndCart)\n  startCart.longitude = CesiumMath.zeroToTwoPi(startCart.longitude)\n  destCart.longitude = CesiumMath.zeroToTwoPi(destCart.longitude)\n\n  let useLongFlight = false\n\n  if (defined(optionFlyOverLongitude)) {\n    const hitLon = CesiumMath.zeroToTwoPi(optionFlyOverLongitude)\n\n    const lonMin = Math.min(startCart.longitude, destCart.longitude)\n    const lonMax = Math.max(startCart.longitude, destCart.longitude)\n\n    const hitInside = hitLon >= lonMin && hitLon <= lonMax\n\n    if (defined(optionFlyOverLongitudeWeight)) {\n      // Distance inside  (0...2Pi)\n      const din = Math.abs(startCart.longitude - destCart.longitude)\n      // Distance outside (0...2Pi)\n      const dot = CesiumMath.TWO_PI - din\n\n      const hitDistance = hitInside ? din : dot\n      const offDistance = hitInside ? dot : din\n\n      if (hitDistance < offDistance * optionFlyOverLongitudeWeight && !hitInside) {\n        useLongFlight = true\n      }\n    } else if (!hitInside) {\n      useLongFlight = true\n    }\n  }\n\n  if (useLongFlight) {\n    useLongestFlight(startCart, destCart)\n  } else {\n    useShortestFlight(startCart, destCart)\n  }\n\n  const heightFunction = createHeightFunction(camera, destination, startCart.height, destCart.height, optionAltitude)\n  const pitchFunction = createPitchFunction(startPitch, pitch, heightFunction, optionPitchAdjustHeight)\n\n  // Isolate scope for update function.\n  // to have local copies of vars used in lerp\n  // Othervise, if you call nex\n  // createUpdate3D (createAnimationTween)\n  // before you played animation, variables will be overwriten.\n  function isolateUpdateFunction () {\n    const startLongitude = startCart.longitude\n    const destLongitude = destCart.longitude\n    const startLatitude = startCart.latitude\n    const destLatitude = destCart.latitude\n\n    return function update (value) {\n      const time = value.time / duration\n\n      const position = Cartesian3.fromRadians(\n        CesiumMath.lerp(startLongitude, destLongitude, time),\n        CesiumMath.lerp(startLatitude, destLatitude, time),\n        heightFunction(time),\n        scene.globe.ellipsoid\n      )\n\n      camera.setView({\n        destination: position,\n        orientation: {\n          heading: CesiumMath.lerp(startHeading, heading, time),\n          pitch: pitchFunction(time),\n          roll: CesiumMath.lerp(startRoll, roll, time)\n        }\n      })\n    }\n  }\n  return isolateUpdateFunction()\n}\n\nfunction createUpdate2D (scene, duration, destination, heading, pitch, roll, optionAltitude) {\n  const { Cartesian2, Cartesian3, Math: CesiumMath } = Cesium\n  const camera = scene.camera\n\n  const start = Cartesian3.clone(camera.position, scratchStart)\n  const startHeading = adjustAngleForLERP(camera.heading, heading)\n\n  const startHeight = camera.frustum.right - camera.frustum.left\n  const heightFunction = createHeightFunction(camera, destination, startHeight, destination.z, optionAltitude)\n\n  function update (value) {\n    const time = value.time / duration\n\n    camera.setView({\n      orientation: {\n        heading: CesiumMath.lerp(startHeading, heading, time)\n      }\n    })\n\n    Cartesian2.lerp(start, destination, time, camera.position)\n\n    const zoom = heightFunction(time)\n\n    const frustum = camera.frustum\n    const ratio = frustum.top / frustum.right\n\n    const incrementAmount = (zoom - (frustum.right - frustum.left)) * 0.5\n    frustum.right += incrementAmount\n    frustum.left -= incrementAmount\n    frustum.top = ratio * frustum.right\n    frustum.bottom = -frustum.top\n  }\n  return update\n}\n\nconst scratchCartographic = {}\nconst scratchDestination = {}\n\nfunction emptyFlight (complete, cancel) {\n  return {\n    startObject: {},\n    stopObject: {},\n    duration: 0.0,\n    complete: complete,\n    cancel: cancel\n  }\n}\n\nfunction wrapCallback (controller, cb) {\n  function wrapped () {\n    if (typeof cb === 'function') {\n      cb()\n    }\n\n    controller.enableInputs = true\n  }\n  return wrapped\n}\n\nCameraFlightPath.createTween = function (scene, options) {\n  const { Cartesian2, Cartesian3, defaultValue, defined, DeveloperError, EasingFunction, Math: CesiumMath, SceneMode } = Cesium\n  options = defaultValue(options, defaultValue.EMPTY_OBJECT)\n  let destination = options.destination\n\n  // >>includeStart('debug', pragmas.debug);\n  if (!defined(scene)) {\n    throw new DeveloperError('scene is required.')\n  }\n  if (!defined(destination)) {\n    throw new DeveloperError('destination is required.')\n  }\n  // >>includeEnd('debug');\n  const mode = scene.mode\n\n  if (mode === SceneMode.MORPHING) {\n    return emptyFlight()\n  }\n\n  const convert = defaultValue(options.convert, true)\n  const projection = scene.mapProjection\n  const ellipsoid = projection.ellipsoid\n  const maximumHeight = options.maximumHeight\n  const flyOverLongitude = options.flyOverLongitude\n  const flyOverLongitudeWeight = options.flyOverLongitudeWeight\n  const pitchAdjustHeight = options.pitchAdjustHeight\n  let easingFunction = options.easingFunction\n\n  if (convert && mode !== SceneMode.SCENE3D) {\n    ellipsoid.cartesianToCartographic(destination, scratchCartographic)\n    destination = projection.project(scratchCartographic, scratchDestination)\n  }\n\n  const camera = scene.camera\n  const transform = options.endTransform\n  if (defined(transform)) {\n    camera._setTransform(transform)\n  }\n\n  let duration = options.duration\n  if (!defined(duration)) {\n    duration = Math.ceil(Cartesian3.distance(camera.position, destination) / 1000000.0) + 2.0\n    duration = Math.min(duration, 3.0)\n  }\n\n  const heading = defaultValue(options.heading, 0.0)\n  const pitch = defaultValue(options.pitch, -CesiumMath.PI_OVER_TWO)\n  const roll = defaultValue(options.roll, 0.0)\n\n  const controller = scene.screenSpaceCameraController\n  controller.enableInputs = false\n\n  const complete = wrapCallback(controller, options.complete)\n  const cancel = wrapCallback(controller, options.cancel)\n\n  const frustum = camera.frustum\n\n  let empty = scene.mode === SceneMode.SCENE2D\n  empty = empty && Cartesian2.equalsEpsilon(camera.position, destination, CesiumMath.EPSILON6)\n  empty =\n    empty &&\n    CesiumMath.equalsEpsilon(\n      Math.max(frustum.right - frustum.left, frustum.top - frustum.bottom),\n      destination.z,\n      CesiumMath.EPSILON6\n    )\n\n  empty =\n    empty || (scene.mode !== SceneMode.SCENE2D && Cartesian3.equalsEpsilon(destination, camera.position, CesiumMath.EPSILON10))\n\n  empty =\n    empty &&\n    CesiumMath.equalsEpsilon(\n      CesiumMath.negativePiToPi(heading),\n      CesiumMath.negativePiToPi(camera.heading),\n      CesiumMath.EPSILON10\n    ) &&\n    CesiumMath.equalsEpsilon(CesiumMath.negativePiToPi(pitch), CesiumMath.negativePiToPi(camera.pitch), CesiumMath.EPSILON10) &&\n    CesiumMath.equalsEpsilon(CesiumMath.negativePiToPi(roll), CesiumMath.negativePiToPi(camera.roll), CesiumMath.EPSILON10)\n\n  if (empty) {\n    return emptyFlight(complete, cancel)\n  }\n\n  const updateFunctions = new Array(4)\n  updateFunctions[SceneMode.SCENE2D] = createUpdate2D\n  updateFunctions[SceneMode.SCENE3D] = createUpdate3D\n  updateFunctions[SceneMode.COLUMBUS_VIEW] = createUpdateCV\n\n  if (duration <= 0.0) {\n    const newOnComplete = function () {\n      const update = updateFunctions[mode](\n        scene,\n        1.0,\n        destination,\n        heading,\n        pitch,\n        roll,\n        maximumHeight,\n        flyOverLongitude,\n        flyOverLongitudeWeight,\n        pitchAdjustHeight\n      )\n      update({ time: 1.0 })\n\n      if (typeof complete === 'function') {\n        complete()\n      }\n    }\n    return emptyFlight(newOnComplete, cancel)\n  }\n\n  const update = updateFunctions[mode](\n    scene,\n    duration,\n    destination,\n    heading,\n    pitch,\n    roll,\n    maximumHeight,\n    flyOverLongitude,\n    flyOverLongitudeWeight,\n    pitchAdjustHeight\n  )\n\n  if (!defined(easingFunction)) {\n    const startHeight = camera.positionCartographic.height\n    const endHeight = mode === SceneMode.SCENE3D ? ellipsoid.cartesianToCartographic(destination).height : destination.z\n\n    if (startHeight > endHeight && startHeight > 11500.0) {\n      easingFunction = EasingFunction.CUBIC_OUT\n    } else {\n      easingFunction = EasingFunction.QUINTIC_IN_OUT\n    }\n  }\n\n  return {\n    duration: duration,\n    easingFunction: easingFunction,\n    startObject: {\n      time: 0.0\n    },\n    stopObject: {\n      time: duration\n    },\n    update: update,\n    complete: complete,\n    cancel: cancel\n  }\n}\nexport default CameraFlightPath\n"],"names":["CameraFlightPath","getAltitude","frustum","dx","dy","Cesium","PerspectiveFrustum","PerspectiveOffCenterFrustum","near","top","right","tanTheta","Math","tan","fovy","aspectRatio","max","scratchCart","scratchCart2","createPitchFunction","startPitch","endPitch","heightFunction","pitchAdjustHeight","defined","CesiumMath","startHeight","endHeight","middleHeight","d1","d2","time","altitude","t1","lerp","PI_OVER_TWO","t2","createHeightFunction","camera","destination","optionAltitude","Cartesian3","maxHeight","start","position","end","up","diff","subtract","verticalDistance","magnitude","multiplyByScalar","dot","horizontalDistance","min","power","factor","s","pow","e","t","x","adjustAngleForLERP","startAngle","endAngle","equalsEpsilon","TWO_PI","EPSILON11","PI","scratchStart","createUpdateCV","scene","duration","heading","pitch","roll","Cartesian2","clone","startHeading","startRoll","z","update","value","setView","orientation","useLongestFlight","startCart","destCart","longitude","useShortestFlight","scratchStartCart","scratchEndCart","createUpdate3D","optionFlyOverLongitude","optionFlyOverLongitudeWeight","optionPitchAdjustHeight","Cartographic","projection","mapProjection","ellipsoid","positionCartographic","cartesianToCartographic","zeroToTwoPi","useLongFlight","hitLon","lonMin","lonMax","hitInside","din","abs","hitDistance","offDistance","height","pitchFunction","isolateUpdateFunction","startLongitude","destLongitude","startLatitude","latitude","destLatitude","fromRadians","globe","createUpdate2D","left","zoom","ratio","incrementAmount","bottom","scratchCartographic","scratchDestination","emptyFlight","complete","cancel","startObject","stopObject","wrapCallback","controller","cb","wrapped","enableInputs","createTween","options","defaultValue","DeveloperError","EasingFunction","SceneMode","EMPTY_OBJECT","mode","MORPHING","convert","maximumHeight","flyOverLongitude","flyOverLongitudeWeight","easingFunction","SCENE3D","project","transform","endTransform","_setTransform","ceil","distance","screenSpaceCameraController","empty","SCENE2D","EPSILON6","EPSILON10","negativePiToPi","updateFunctions","Array","COLUMBUS_VIEW","newOnComplete","CUBIC_OUT","QUINTIC_IN_OUT"],"mappings":"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"}