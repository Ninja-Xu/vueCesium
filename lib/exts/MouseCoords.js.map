{"version":3,"file":"MouseCoords.js","sources":["src/exts/MouseCoords.js"],"sourcesContent":["import { debounce } from 'lodash-es'\nimport prettifyCoordinates from './prettifyCoordinates'\nimport prettifyProjection from './prettifyProjection'\nimport EarthGravityModel1996 from './EarthGravityModel1996'\nclass MouseCoords {\n  constructor (options = {}) {\n    const { Cartographic, knockout } = Cesium\n    const gridFileUrl = options.gridFileUrl\n    gridFileUrl && (this.geoidModel = new EarthGravityModel1996(gridFileUrl))\n\n    this.proj4Projection = options.proj4Projection || '+proj=utm +ellps=GRS80 +units=m +no_defs'\n    this.projectionUnits = options.projectionUnits || 'm'\n    this.proj4longlat = options.proj4longlat || '+proj=longlat +ellps=WGS84 +datum=WGS84 +units=degrees +no_defs'\n\n    this.lastHeightSamplePosition = new Cartographic()\n    this.accurateSamplingDebounceTime = 250\n    this.tileRequestInFlight = undefined\n\n    this.elevation = undefined\n    this.utmZone = undefined\n    this.latitude = undefined\n    this.longitude = undefined\n    this.north = undefined\n    this.east = undefined\n    this.useProjection = false\n    this.debounceSampleAccurateHeight = debounce(this.sampleAccurateHeight, this.accurateSamplingDebounceTime)\n\n    knockout.track(this, ['elevation', 'utmZone', 'latitude', 'longitude', 'north', 'east', 'useProjection'])\n  }\n\n  toggleUseProjection () {\n    this.useProjection = !this.useProjection\n  }\n\n  updateCoordinatesFromCesium (viewer, position) {\n    const { Cartographic, defined, EllipsoidTerrainProvider, Intersections2D, SceneMode } = Cesium\n    const scene = viewer.scene\n    const camera = scene.camera\n    const pickRay = camera.getPickRay(position)\n    const globe = scene.globe\n    const pickedTriangle = globe.pickTriangle(pickRay, scene)\n    if (defined(pickedTriangle)) {\n      // Get a fast, accurate-ish height every time the mouse moves.\n      const ellipsoid = globe.ellipsoid\n\n      const v0 = ellipsoid.cartesianToCartographic(pickedTriangle.v0)\n      const v1 = ellipsoid.cartesianToCartographic(pickedTriangle.v1)\n      const v2 = ellipsoid.cartesianToCartographic(pickedTriangle.v2)\n      const intersection = ellipsoid.cartesianToCartographic(scene.mode === SceneMode.SCENE3D ? pickedTriangle.intersection : scene.globe.pick(pickRay, scene))\n      let errorBar\n\n      if (globe.terrainProvider instanceof EllipsoidTerrainProvider) {\n        intersection.height = undefined\n      } else {\n        const barycentric = Intersections2D.computeBarycentricCoordinates(\n          intersection.longitude,\n          intersection.latitude,\n          v0.longitude,\n          v0.latitude,\n          v1.longitude,\n          v1.latitude,\n          v2.longitude,\n          v2.latitude\n        )\n\n        if (barycentric.x >= -1e-15 && barycentric.y >= -1e-15 && barycentric.z >= -1e-15) {\n          const height = barycentric.x * v0.height + barycentric.y * v1.height + barycentric.z * v2.height\n          intersection.height = height\n        }\n        const geometricError = globe.terrainProvider.getLevelMaximumGeometricError(pickedTriangle.tile.level)\n        const approximateHeight = intersection.height\n        const minHeight = Math.max(pickedTriangle.tile.data.tileBoundingRegion.minimumHeight, approximateHeight - geometricError)\n        const maxHeight = Math.min(pickedTriangle.tile.data.tileBoundingRegion.maximumHeight, approximateHeight + geometricError)\n        const minHeightGeoid = minHeight - (this.geoidModel ? this.geoidModel.minimumHeight : 0.0)\n        const maxHeightGeoid = maxHeight + (this.geoidModel ? this.geoidModel.maximumHeight : 0.0)\n        errorBar = Math.max(Math.abs(approximateHeight - minHeightGeoid), Math.abs(maxHeightGeoid - approximateHeight))\n      }\n      Cartographic.clone(intersection, this.lastHeightSamplePosition)\n      const terrainProvider = globe.terrainProvider\n\n      this.cartographicToFields(intersection, errorBar)\n      if (!(terrainProvider instanceof EllipsoidTerrainProvider)) {\n        this.debounceSampleAccurateHeight(terrainProvider, intersection)\n      }\n    } else {\n      this.elevation = undefined\n      this.utmZone = undefined\n      this.latitude = undefined\n      this.longitude = undefined\n      this.north = undefined\n      this.east = undefined\n    }\n  }\n\n  cartographicToFields (coordinates, errorBar) {\n    const { Math: CesiumMath } = Cesium\n    const latitude = CesiumMath.toDegrees(coordinates.latitude)\n    const longitude = CesiumMath.toDegrees(coordinates.longitude)\n\n    if (this.useProjection) {\n      const prettyProjection = prettifyProjection(\n        longitude,\n        latitude,\n        this.proj4Projection,\n        this.proj4longlat,\n        this.projectionUnits\n      )\n      this.utmZone = prettyProjection.utmZone\n      this.north = prettyProjection.north\n      this.east = prettyProjection.east\n    }\n\n    const prettyCoordinate = prettifyCoordinates(longitude, latitude, {\n      height: coordinates.height,\n      errorBar: errorBar\n    })\n    this.latitude = prettyCoordinate.latitude\n    this.longitude = prettyCoordinate.longitude\n    this.elevation = prettyCoordinate.elevation\n  }\n\n  sampleAccurateHeight (terrainProvider, position) {\n    const { Cartographic, sampleTerrainMostDetailed, when } = Cesium\n    if (this.tileRequestInFlight) {\n      // A tile request is already in flight, so reschedule for later.\n      this.debounceSampleAccurateHeight.cancel()\n      this.debounceSampleAccurateHeight(terrainProvider, position)\n      return\n    }\n\n    const positionWithHeight = Cartographic.clone(position)\n\n    const geoidHeightPromise = this.geoidModel ? this.geoidModel.getHeight(position.longitude, position.latitude) : undefined\n    const terrainPromise = sampleTerrainMostDetailed(terrainProvider, [positionWithHeight])\n    this.tileRequestInFlight = when.all(\n      [geoidHeightPromise, terrainPromise],\n      (result) => {\n        const geoidHeight = result[0] || 0.0\n        this.tileRequestInFlight = undefined\n        if (Cartographic.equals(position, this.lastHeightSamplePosition)) {\n          position.height = positionWithHeight.height - geoidHeight\n          this.cartographicToFields(position)\n        } else {\n          // Mouse moved since we started this request, so the result isn't useful.  Try again next time.\n        }\n      },\n      () => {\n        this.tileRequestInFlight = undefined\n      }\n    )\n  }\n}\n\nexport default MouseCoords\n"],"names":["MouseCoords","options","Cesium","Cartographic","knockout","gridFileUrl","geoidModel","EarthGravityModel1996","proj4Projection","projectionUnits","proj4longlat","lastHeightSamplePosition","accurateSamplingDebounceTime","tileRequestInFlight","undefined","elevation","utmZone","latitude","longitude","north","east","useProjection","debounceSampleAccurateHeight","debounce","sampleAccurateHeight","track","viewer","position","defined","EllipsoidTerrainProvider","Intersections2D","SceneMode","scene","camera","pickRay","getPickRay","globe","pickedTriangle","pickTriangle","ellipsoid","v0","cartesianToCartographic","v1","v2","intersection","mode","SCENE3D","pick","errorBar","terrainProvider","height","barycentric","computeBarycentricCoordinates","x","y","z","geometricError","getLevelMaximumGeometricError","tile","level","approximateHeight","minHeight","Math","max","data","tileBoundingRegion","minimumHeight","maxHeight","min","maximumHeight","minHeightGeoid","maxHeightGeoid","abs","clone","cartographicToFields","coordinates","CesiumMath","toDegrees","prettyProjection","prettifyProjection","prettyCoordinate","prettifyCoordinates","sampleTerrainMostDetailed","when","cancel","positionWithHeight","geoidHeightPromise","getHeight","terrainPromise","all","result","geoidHeight","equals"],"mappings":"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"}