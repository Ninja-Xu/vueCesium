{"version":3,"file":"particlesComputing.js","sources":["src/exts/wind/particlesComputing.js"],"sourcesContent":["import Util from './util'\nimport CustomPrimitive from './customPrimitive'\nimport { getWindFrag, updateSpeedFrag, updatePositionFrag, postProcessingPositionFrag, postProcessingSpeedFrag } from './glsl'\n\nclass ParticlesComputing {\n  constructor (context, data, particleSystemOptions, viewerParameters) {\n    this.data = data\n    this.createWindTextures(context, data)\n    this.createParticlesTextures(context, particleSystemOptions, viewerParameters)\n    this.createComputingPrimitives(data, particleSystemOptions, viewerParameters)\n  }\n\n  createWindTextures (context, data) {\n    const windTextureOptions = {\n      context: context,\n      width: data.dimensions.lon,\n      height: data.dimensions.lat * data.dimensions.lev,\n      pixelFormat: Cesium.PixelFormat.LUMINANCE,\n      pixelDatatype: Cesium.PixelDatatype.FLOAT,\n      flipY: false,\n      sampler: new Cesium.Sampler({\n        // the values of texture will not be interpolated\n        minificationFilter: Cesium.TextureMinificationFilter.NEAREST,\n        magnificationFilter: Cesium.TextureMagnificationFilter.NEAREST\n      })\n    }\n\n    this.windTextures = {\n      U: Util.createTexture(windTextureOptions, data.U.array),\n      V: Util.createTexture(windTextureOptions, data.V.array)\n    }\n  }\n\n  randomizeParticles (maxParticles, viewerParameters) {\n    const array = new Float32Array(4 * maxParticles)\n    for (let i = 0; i < maxParticles; i++) {\n      array[4 * i] = Cesium.Math.randomBetween(viewerParameters.lonRange.x, viewerParameters.lonRange.y)\n      array[4 * i + 1] = Cesium.Math.randomBetween(viewerParameters.latRange.x, viewerParameters.latRange.y)\n      array[4 * i + 2] = Cesium.Math.randomBetween(this.data.lev.min, this.data.lev.max)\n      array[4 * i + 3] = 0.0\n    }\n    return array\n  }\n\n  createParticlesTextures (context, particleSystemOptions, viewerParameters) {\n    const particlesTextureOptions = {\n      context: context,\n      width: particleSystemOptions.particlesTextureSize,\n      height: particleSystemOptions.particlesTextureSize,\n      pixelFormat: Cesium.PixelFormat.RGBA,\n      pixelDatatype: Cesium.PixelDatatype.FLOAT,\n      flipY: false,\n      sampler: new Cesium.Sampler({\n        // the values of texture will not be interpolated\n        minificationFilter: Cesium.TextureMinificationFilter.NEAREST,\n        magnificationFilter: Cesium.TextureMagnificationFilter.NEAREST\n      })\n    }\n\n    const particlesArray = this.randomizeParticles(particleSystemOptions.maxParticles, viewerParameters)\n\n    this.particlesTextures = {\n      particlesWind: Util.createTexture(particlesTextureOptions),\n\n      currentParticlesPosition: Util.createTexture(particlesTextureOptions, particlesArray),\n      nextParticlesPosition: Util.createTexture(particlesTextureOptions, particlesArray),\n\n      currentParticlesSpeed: Util.createTexture(particlesTextureOptions),\n      nextParticlesSpeed: Util.createTexture(particlesTextureOptions),\n\n      postProcessingPosition: Util.createTexture(particlesTextureOptions, particlesArray),\n      postProcessingSpeed: Util.createTexture(particlesTextureOptions)\n    }\n  }\n\n  destroyParticlesTextures () {\n    Object.keys(this.particlesTextures).forEach((key) => {\n      this.particlesTextures[key].destroy()\n    })\n  }\n\n  createComputingPrimitives (data, particleSystemOptions, viewerParameters) {\n    const dimension = new Cesium.Cartesian3(data.dimensions.lon, data.dimensions.lat, data.dimensions.lev)\n    const minimum = new Cesium.Cartesian3(data.lon.min, data.lat.min, data.lev.min)\n    const maximum = new Cesium.Cartesian3(data.lon.max, data.lat.max, data.lev.max)\n    const interval = new Cesium.Cartesian3(\n      (maximum.x - minimum.x) / (dimension.x - 1),\n      (maximum.y - minimum.y) / (dimension.y - 1),\n      dimension.z > 1 ? (maximum.z - minimum.z) / (dimension.z - 1) : 1.0\n    )\n    const uSpeedRange = new Cesium.Cartesian2(data.U.min, data.U.max)\n    const vSpeedRange = new Cesium.Cartesian2(data.V.min, data.V.max)\n\n    const that = this\n\n    this.primitives = {\n      getWind: new CustomPrimitive({\n        commandType: 'Compute',\n        uniformMap: {\n          U: function () {\n            return that.windTextures.U\n          },\n          V: function () {\n            return that.windTextures.V\n          },\n          currentParticlesPosition: function () {\n            return that.particlesTextures.currentParticlesPosition\n          },\n          dimension: function () {\n            return dimension\n          },\n          minimum: function () {\n            return minimum\n          },\n          maximum: function () {\n            return maximum\n          },\n          interval: function () {\n            return interval\n          }\n        },\n        fragmentShaderSource: new Cesium.ShaderSource({\n          sources: [getWindFrag]\n        }),\n        outputTexture: this.particlesTextures.particlesWind,\n        preExecute: function () {\n          // keep the outputTexture up to date\n          that.primitives.getWind.commandToExecute.outputTexture = that.particlesTextures.particlesWind\n        }\n      }),\n\n      updateSpeed: new CustomPrimitive({\n        commandType: 'Compute',\n        uniformMap: {\n          currentParticlesSpeed: function () {\n            return that.particlesTextures.currentParticlesSpeed\n          },\n          particlesWind: function () {\n            return that.particlesTextures.particlesWind\n          },\n          uSpeedRange: function () {\n            return uSpeedRange\n          },\n          vSpeedRange: function () {\n            return vSpeedRange\n          },\n          pixelSize: function () {\n            return viewerParameters.pixelSize\n          },\n          speedFactor: function () {\n            return particleSystemOptions.speedFactor\n          }\n        },\n        fragmentShaderSource: new Cesium.ShaderSource({\n          sources: [updateSpeedFrag]\n        }),\n        outputTexture: this.particlesTextures.nextParticlesSpeed,\n        preExecute: function () {\n          // swap textures before binding\n          const temp = that.particlesTextures.currentParticlesSpeed\n          that.particlesTextures.currentParticlesSpeed = that.particlesTextures.postProcessingSpeed\n          that.particlesTextures.postProcessingSpeed = temp\n\n          // keep the outputTexture up to date\n          that.primitives.updateSpeed.commandToExecute.outputTexture = that.particlesTextures.nextParticlesSpeed\n        }\n      }),\n\n      updatePosition: new CustomPrimitive({\n        commandType: 'Compute',\n        uniformMap: {\n          currentParticlesPosition: function () {\n            return that.particlesTextures.currentParticlesPosition\n          },\n          currentParticlesSpeed: function () {\n            return that.particlesTextures.currentParticlesSpeed\n          }\n        },\n        fragmentShaderSource: new Cesium.ShaderSource({\n          sources: [updatePositionFrag]\n        }),\n        outputTexture: this.particlesTextures.nextParticlesPosition,\n        preExecute: function () {\n          // swap textures before binding\n          const temp = that.particlesTextures.currentParticlesPosition\n          that.particlesTextures.currentParticlesPosition = that.particlesTextures.postProcessingPosition\n          that.particlesTextures.postProcessingPosition = temp\n\n          // keep the outputTexture up to date\n          that.primitives.updatePosition.commandToExecute.outputTexture = that.particlesTextures.nextParticlesPosition\n        }\n      }),\n\n      postProcessingPosition: new CustomPrimitive({\n        commandType: 'Compute',\n        uniformMap: {\n          nextParticlesPosition: function () {\n            return that.particlesTextures.nextParticlesPosition\n          },\n          nextParticlesSpeed: function () {\n            return that.particlesTextures.nextParticlesSpeed\n          },\n          lonRange: function () {\n            return viewerParameters.lonRange\n          },\n          latRange: function () {\n            return viewerParameters.latRange\n          },\n          lonDataRange: function () {\n            return viewerParameters.lonDataRange\n          },\n          latDataRange: function () {\n            return viewerParameters.latDataRange\n          },\n          randomCoef: function () {\n            const randomCoef = Math.random()\n            return randomCoef\n          },\n          dropRate: function () {\n            return particleSystemOptions.dropRate\n          },\n          dropRateBump: function () {\n            return particleSystemOptions.dropRateBump\n          }\n        },\n        fragmentShaderSource: new Cesium.ShaderSource({\n          sources: [postProcessingPositionFrag]\n        }),\n        outputTexture: this.particlesTextures.postProcessingPosition,\n        preExecute: function () {\n          // keep the outputTexture up to date\n          that.primitives.postProcessingPosition.commandToExecute.outputTexture = that.particlesTextures.postProcessingPosition\n        }\n      }),\n\n      postProcessingSpeed: new CustomPrimitive({\n        commandType: 'Compute',\n        uniformMap: {\n          postProcessingPosition: function () {\n            return that.particlesTextures.postProcessingPosition\n          },\n          nextParticlesSpeed: function () {\n            return that.particlesTextures.nextParticlesSpeed\n          }\n        },\n        fragmentShaderSource: new Cesium.ShaderSource({\n          sources: [postProcessingSpeedFrag]\n        }),\n        outputTexture: this.particlesTextures.postProcessingSpeed,\n        preExecute: function () {\n          // keep the outputTexture up to date\n          that.primitives.postProcessingSpeed.commandToExecute.outputTexture = that.particlesTextures.postProcessingSpeed\n        }\n      })\n    }\n  }\n}\n\nexport default ParticlesComputing\n"],"names":["ParticlesComputing","context","data","particleSystemOptions","viewerParameters","createWindTextures","createParticlesTextures","createComputingPrimitives","windTextureOptions","width","dimensions","lon","height","lat","lev","pixelFormat","Cesium","PixelFormat","LUMINANCE","pixelDatatype","PixelDatatype","FLOAT","flipY","sampler","Sampler","minificationFilter","TextureMinificationFilter","NEAREST","magnificationFilter","TextureMagnificationFilter","windTextures","U","Util","createTexture","array","V","maxParticles","Float32Array","i","Math","randomBetween","lonRange","x","y","latRange","min","max","particlesTextureOptions","particlesTextureSize","RGBA","particlesArray","randomizeParticles","particlesTextures","particlesWind","currentParticlesPosition","nextParticlesPosition","currentParticlesSpeed","nextParticlesSpeed","postProcessingPosition","postProcessingSpeed","forEach","key","destroy","dimension","Cartesian3","minimum","maximum","interval","z","uSpeedRange","Cartesian2","vSpeedRange","that","primitives","getWind","CustomPrimitive","commandType","uniformMap","fragmentShaderSource","ShaderSource","sources","getWindFrag","outputTexture","preExecute","commandToExecute","updateSpeed","pixelSize","speedFactor","updateSpeedFrag","temp","updatePosition","updatePositionFrag","lonDataRange","latDataRange","randomCoef","random","dropRate","dropRateBump","postProcessingPositionFrag","postProcessingSpeedFrag"],"mappings":";;;;;;;;;;;;;;;;;;IAIMA;AACJ,8BAAaC,OAAb,EAAsBC,IAAtB,EAA4BC,qBAA5B,EAAmDC,gBAAnD,EAAqE;AAAA;;AACnE,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKG,kBAAL,CAAwBJ,OAAxB,EAAiCC,IAAjC;AACA,SAAKI,uBAAL,CAA6BL,OAA7B,EAAsCE,qBAAtC,EAA6DC,gBAA7D;AACA,SAAKG,yBAAL,CAA+BL,IAA/B,EAAqCC,qBAArC,EAA4DC,gBAA5D;AACD;;;;WAED,4BAAoBH,OAApB,EAA6BC,IAA7B,EAAmC;AACjC,UAAMM,kBAAkB,GAAG;AACzBP,QAAAA,OAAO,EAAEA,OADgB;AAEzBQ,QAAAA,KAAK,EAAEP,IAAI,CAACQ,UAAL,CAAgBC,GAFE;AAGzBC,QAAAA,MAAM,EAAEV,IAAI,CAACQ,UAAL,CAAgBG,GAAhB,GAAsBX,IAAI,CAACQ,UAAL,CAAgBI,GAHrB;AAIzBC,QAAAA,WAAW,EAAEC,MAAM,CAACC,WAAP,CAAmBC,SAJP;AAKzBC,QAAAA,aAAa,EAAEH,MAAM,CAACI,aAAP,CAAqBC,KALX;AAMzBC,QAAAA,KAAK,EAAE,KANkB;AAOzBC,QAAAA,OAAO,EAAE,IAAIP,MAAM,CAACQ,OAAX,CAAmB;AAC1B;AACAC,UAAAA,kBAAkB,EAAET,MAAM,CAACU,yBAAP,CAAiCC,OAF3B;AAG1BC,UAAAA,mBAAmB,EAAEZ,MAAM,CAACa,0BAAP,CAAkCF;AAH7B,SAAnB;AAPgB,OAA3B;AAcA,WAAKG,YAAL,GAAoB;AAClBC,QAAAA,CAAC,EAAEC,IAAI,CAACC,aAAL,CAAmBzB,kBAAnB,EAAuCN,IAAI,CAAC6B,CAAL,CAAOG,KAA9C,CADe;AAElBC,QAAAA,CAAC,EAAEH,IAAI,CAACC,aAAL,CAAmBzB,kBAAnB,EAAuCN,IAAI,CAACiC,CAAL,CAAOD,KAA9C;AAFe,OAApB;AAID;;;WAED,4BAAoBE,YAApB,EAAkChC,gBAAlC,EAAoD;AAClD,UAAM8B,KAAK,GAAG,IAAIG,YAAJ,CAAiB,IAAID,YAArB,CAAd;;AACA,WAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,YAApB,EAAkCE,CAAC,EAAnC,EAAuC;AACrCJ,QAAAA,KAAK,CAAC,IAAII,CAAL,CAAL,GAAetB,MAAM,CAACuB,IAAP,CAAYC,aAAZ,CAA0BpC,gBAAgB,CAACqC,QAAjB,CAA0BC,CAApD,EAAuDtC,gBAAgB,CAACqC,QAAjB,CAA0BE,CAAjF,CAAf;AACAT,QAAAA,KAAK,CAAC,IAAII,CAAJ,GAAQ,CAAT,CAAL,GAAmBtB,MAAM,CAACuB,IAAP,CAAYC,aAAZ,CAA0BpC,gBAAgB,CAACwC,QAAjB,CAA0BF,CAApD,EAAuDtC,gBAAgB,CAACwC,QAAjB,CAA0BD,CAAjF,CAAnB;AACAT,QAAAA,KAAK,CAAC,IAAII,CAAJ,GAAQ,CAAT,CAAL,GAAmBtB,MAAM,CAACuB,IAAP,CAAYC,aAAZ,CAA0B,KAAKtC,IAAL,CAAUY,GAAV,CAAc+B,GAAxC,EAA6C,KAAK3C,IAAL,CAAUY,GAAV,CAAcgC,GAA3D,CAAnB;AACAZ,QAAAA,KAAK,CAAC,IAAII,CAAJ,GAAQ,CAAT,CAAL,GAAmB,GAAnB;AACD;;AACD,aAAOJ,KAAP;AACD;;;WAED,iCAAyBjC,OAAzB,EAAkCE,qBAAlC,EAAyDC,gBAAzD,EAA2E;AACzE,UAAM2C,uBAAuB,GAAG;AAC9B9C,QAAAA,OAAO,EAAEA,OADqB;AAE9BQ,QAAAA,KAAK,EAAEN,qBAAqB,CAAC6C,oBAFC;AAG9BpC,QAAAA,MAAM,EAAET,qBAAqB,CAAC6C,oBAHA;AAI9BjC,QAAAA,WAAW,EAAEC,MAAM,CAACC,WAAP,CAAmBgC,IAJF;AAK9B9B,QAAAA,aAAa,EAAEH,MAAM,CAACI,aAAP,CAAqBC,KALN;AAM9BC,QAAAA,KAAK,EAAE,KANuB;AAO9BC,QAAAA,OAAO,EAAE,IAAIP,MAAM,CAACQ,OAAX,CAAmB;AAC1B;AACAC,UAAAA,kBAAkB,EAAET,MAAM,CAACU,yBAAP,CAAiCC,OAF3B;AAG1BC,UAAAA,mBAAmB,EAAEZ,MAAM,CAACa,0BAAP,CAAkCF;AAH7B,SAAnB;AAPqB,OAAhC;AAcA,UAAMuB,cAAc,GAAG,KAAKC,kBAAL,CAAwBhD,qBAAqB,CAACiC,YAA9C,EAA4DhC,gBAA5D,CAAvB;AAEA,WAAKgD,iBAAL,GAAyB;AACvBC,QAAAA,aAAa,EAAErB,IAAI,CAACC,aAAL,CAAmBc,uBAAnB,CADQ;AAGvBO,QAAAA,wBAAwB,EAAEtB,IAAI,CAACC,aAAL,CAAmBc,uBAAnB,EAA4CG,cAA5C,CAHH;AAIvBK,QAAAA,qBAAqB,EAAEvB,IAAI,CAACC,aAAL,CAAmBc,uBAAnB,EAA4CG,cAA5C,CAJA;AAMvBM,QAAAA,qBAAqB,EAAExB,IAAI,CAACC,aAAL,CAAmBc,uBAAnB,CANA;AAOvBU,QAAAA,kBAAkB,EAAEzB,IAAI,CAACC,aAAL,CAAmBc,uBAAnB,CAPG;AASvBW,QAAAA,sBAAsB,EAAE1B,IAAI,CAACC,aAAL,CAAmBc,uBAAnB,EAA4CG,cAA5C,CATD;AAUvBS,QAAAA,mBAAmB,EAAE3B,IAAI,CAACC,aAAL,CAAmBc,uBAAnB;AAVE,OAAzB;AAYD;;;WAED,oCAA4B;AAAA;;AAC1B,mBAAY,KAAKK,iBAAjB,EAAoCQ,OAApC,CAA4C,UAACC,GAAD,EAAS;AACnD,QAAA,KAAI,CAACT,iBAAL,CAAuBS,GAAvB,EAA4BC,OAA5B;AACD,OAFD;AAGD;;;WAED,mCAA2B5D,IAA3B,EAAiCC,qBAAjC,EAAwDC,gBAAxD,EAA0E;AACxE,UAAM2D,UAAS,GAAG,IAAI/C,MAAM,CAACgD,UAAX,CAAsB9D,IAAI,CAACQ,UAAL,CAAgBC,GAAtC,EAA2CT,IAAI,CAACQ,UAAL,CAAgBG,GAA3D,EAAgEX,IAAI,CAACQ,UAAL,CAAgBI,GAAhF,CAAlB;;AACA,UAAMmD,QAAO,GAAG,IAAIjD,MAAM,CAACgD,UAAX,CAAsB9D,IAAI,CAACS,GAAL,CAASkC,GAA/B,EAAoC3C,IAAI,CAACW,GAAL,CAASgC,GAA7C,EAAkD3C,IAAI,CAACY,GAAL,CAAS+B,GAA3D,CAAhB;;AACA,UAAMqB,QAAO,GAAG,IAAIlD,MAAM,CAACgD,UAAX,CAAsB9D,IAAI,CAACS,GAAL,CAASmC,GAA/B,EAAoC5C,IAAI,CAACW,GAAL,CAASiC,GAA7C,EAAkD5C,IAAI,CAACY,GAAL,CAASgC,GAA3D,CAAhB;;AACA,UAAMqB,SAAQ,GAAG,IAAInD,MAAM,CAACgD,UAAX,CACf,CAACE,QAAO,CAACxB,CAAR,GAAYuB,QAAO,CAACvB,CAArB,KAA2BqB,UAAS,CAACrB,CAAV,GAAc,CAAzC,CADe,EAEf,CAACwB,QAAO,CAACvB,CAAR,GAAYsB,QAAO,CAACtB,CAArB,KAA2BoB,UAAS,CAACpB,CAAV,GAAc,CAAzC,CAFe,EAGfoB,UAAS,CAACK,CAAV,GAAc,CAAd,GAAkB,CAACF,QAAO,CAACE,CAAR,GAAYH,QAAO,CAACG,CAArB,KAA2BL,UAAS,CAACK,CAAV,GAAc,CAAzC,CAAlB,GAAgE,GAHjD,CAAjB;;AAKA,UAAMC,YAAW,GAAG,IAAIrD,MAAM,CAACsD,UAAX,CAAsBpE,IAAI,CAAC6B,CAAL,CAAOc,GAA7B,EAAkC3C,IAAI,CAAC6B,CAAL,CAAOe,GAAzC,CAApB;;AACA,UAAMyB,YAAW,GAAG,IAAIvD,MAAM,CAACsD,UAAX,CAAsBpE,IAAI,CAACiC,CAAL,CAAOU,GAA7B,EAAkC3C,IAAI,CAACiC,CAAL,CAAOW,GAAzC,CAApB;;AAEA,UAAM0B,IAAI,GAAG,IAAb;AAEA,WAAKC,UAAL,GAAkB;AAChBC,QAAAA,OAAO,EAAE,IAAIC,eAAJ,CAAoB;AAC3BC,UAAAA,WAAW,EAAE,SADc;AAE3BC,UAAAA,UAAU,EAAE;AACV9C,YAAAA,CAAC,EAAE,aAAY;AACb,qBAAOyC,IAAI,CAAC1C,YAAL,CAAkBC,CAAzB;AACD,aAHS;AAIVI,YAAAA,CAAC,EAAE,aAAY;AACb,qBAAOqC,IAAI,CAAC1C,YAAL,CAAkBK,CAAzB;AACD,aANS;AAOVmB,YAAAA,wBAAwB,EAAE,oCAAY;AACpC,qBAAOkB,IAAI,CAACpB,iBAAL,CAAuBE,wBAA9B;AACD,aATS;AAUVS,YAAAA,SAAS,EAAE,qBAAY;AACrB,qBAAOA,UAAP;AACD,aAZS;AAaVE,YAAAA,OAAO,EAAE,mBAAY;AACnB,qBAAOA,QAAP;AACD,aAfS;AAgBVC,YAAAA,OAAO,EAAE,mBAAY;AACnB,qBAAOA,QAAP;AACD,aAlBS;AAmBVC,YAAAA,QAAQ,EAAE,oBAAY;AACpB,qBAAOA,SAAP;AACD;AArBS,WAFe;AAyB3BW,UAAAA,oBAAoB,EAAE,IAAI9D,MAAM,CAAC+D,YAAX,CAAwB;AAC5CC,YAAAA,OAAO,EAAE,CAACC,WAAD;AADmC,WAAxB,CAzBK;AA4B3BC,UAAAA,aAAa,EAAE,KAAK9B,iBAAL,CAAuBC,aA5BX;AA6B3B8B,UAAAA,UAAU,EAAE,sBAAY;AACtB;AACAX,YAAAA,IAAI,CAACC,UAAL,CAAgBC,OAAhB,CAAwBU,gBAAxB,CAAyCF,aAAzC,GAAyDV,IAAI,CAACpB,iBAAL,CAAuBC,aAAhF;AACD;AAhC0B,SAApB,CADO;AAoChBgC,QAAAA,WAAW,EAAE,IAAIV,eAAJ,CAAoB;AAC/BC,UAAAA,WAAW,EAAE,SADkB;AAE/BC,UAAAA,UAAU,EAAE;AACVrB,YAAAA,qBAAqB,EAAE,iCAAY;AACjC,qBAAOgB,IAAI,CAACpB,iBAAL,CAAuBI,qBAA9B;AACD,aAHS;AAIVH,YAAAA,aAAa,EAAE,yBAAY;AACzB,qBAAOmB,IAAI,CAACpB,iBAAL,CAAuBC,aAA9B;AACD,aANS;AAOVgB,YAAAA,WAAW,EAAE,uBAAY;AACvB,qBAAOA,YAAP;AACD,aATS;AAUVE,YAAAA,WAAW,EAAE,uBAAY;AACvB,qBAAOA,YAAP;AACD,aAZS;AAaVe,YAAAA,SAAS,EAAE,qBAAY;AACrB,qBAAOlF,gBAAgB,CAACkF,SAAxB;AACD,aAfS;AAgBVC,YAAAA,WAAW,EAAE,uBAAY;AACvB,qBAAOpF,qBAAqB,CAACoF,WAA7B;AACD;AAlBS,WAFmB;AAsB/BT,UAAAA,oBAAoB,EAAE,IAAI9D,MAAM,CAAC+D,YAAX,CAAwB;AAC5CC,YAAAA,OAAO,EAAE,CAACQ,eAAD;AADmC,WAAxB,CAtBS;AAyB/BN,UAAAA,aAAa,EAAE,KAAK9B,iBAAL,CAAuBK,kBAzBP;AA0B/B0B,UAAAA,UAAU,EAAE,sBAAY;AACtB;AACA,gBAAMM,IAAI,GAAGjB,IAAI,CAACpB,iBAAL,CAAuBI,qBAApC;AACAgB,YAAAA,IAAI,CAACpB,iBAAL,CAAuBI,qBAAvB,GAA+CgB,IAAI,CAACpB,iBAAL,CAAuBO,mBAAtE;AACAa,YAAAA,IAAI,CAACpB,iBAAL,CAAuBO,mBAAvB,GAA6C8B,IAA7C,CAJsB;;AAOtBjB,YAAAA,IAAI,CAACC,UAAL,CAAgBY,WAAhB,CAA4BD,gBAA5B,CAA6CF,aAA7C,GAA6DV,IAAI,CAACpB,iBAAL,CAAuBK,kBAApF;AACD;AAlC8B,SAApB,CApCG;AAyEhBiC,QAAAA,cAAc,EAAE,IAAIf,eAAJ,CAAoB;AAClCC,UAAAA,WAAW,EAAE,SADqB;AAElCC,UAAAA,UAAU,EAAE;AACVvB,YAAAA,wBAAwB,EAAE,oCAAY;AACpC,qBAAOkB,IAAI,CAACpB,iBAAL,CAAuBE,wBAA9B;AACD,aAHS;AAIVE,YAAAA,qBAAqB,EAAE,iCAAY;AACjC,qBAAOgB,IAAI,CAACpB,iBAAL,CAAuBI,qBAA9B;AACD;AANS,WAFsB;AAUlCsB,UAAAA,oBAAoB,EAAE,IAAI9D,MAAM,CAAC+D,YAAX,CAAwB;AAC5CC,YAAAA,OAAO,EAAE,CAACW,kBAAD;AADmC,WAAxB,CAVY;AAalCT,UAAAA,aAAa,EAAE,KAAK9B,iBAAL,CAAuBG,qBAbJ;AAclC4B,UAAAA,UAAU,EAAE,sBAAY;AACtB;AACA,gBAAMM,IAAI,GAAGjB,IAAI,CAACpB,iBAAL,CAAuBE,wBAApC;AACAkB,YAAAA,IAAI,CAACpB,iBAAL,CAAuBE,wBAAvB,GAAkDkB,IAAI,CAACpB,iBAAL,CAAuBM,sBAAzE;AACAc,YAAAA,IAAI,CAACpB,iBAAL,CAAuBM,sBAAvB,GAAgD+B,IAAhD,CAJsB;;AAOtBjB,YAAAA,IAAI,CAACC,UAAL,CAAgBiB,cAAhB,CAA+BN,gBAA/B,CAAgDF,aAAhD,GAAgEV,IAAI,CAACpB,iBAAL,CAAuBG,qBAAvF;AACD;AAtBiC,SAApB,CAzEA;AAkGhBG,QAAAA,sBAAsB,EAAE,IAAIiB,eAAJ,CAAoB;AAC1CC,UAAAA,WAAW,EAAE,SAD6B;AAE1CC,UAAAA,UAAU,EAAE;AACVtB,YAAAA,qBAAqB,EAAE,iCAAY;AACjC,qBAAOiB,IAAI,CAACpB,iBAAL,CAAuBG,qBAA9B;AACD,aAHS;AAIVE,YAAAA,kBAAkB,EAAE,8BAAY;AAC9B,qBAAOe,IAAI,CAACpB,iBAAL,CAAuBK,kBAA9B;AACD,aANS;AAOVhB,YAAAA,QAAQ,EAAE,oBAAY;AACpB,qBAAOrC,gBAAgB,CAACqC,QAAxB;AACD,aATS;AAUVG,YAAAA,QAAQ,EAAE,oBAAY;AACpB,qBAAOxC,gBAAgB,CAACwC,QAAxB;AACD,aAZS;AAaVgD,YAAAA,YAAY,EAAE,wBAAY;AACxB,qBAAOxF,gBAAgB,CAACwF,YAAxB;AACD,aAfS;AAgBVC,YAAAA,YAAY,EAAE,wBAAY;AACxB,qBAAOzF,gBAAgB,CAACyF,YAAxB;AACD,aAlBS;AAmBVC,YAAAA,UAAU,EAAE,sBAAY;AACtB,kBAAMA,UAAU,GAAGvD,IAAI,CAACwD,MAAL,EAAnB;AACA,qBAAOD,UAAP;AACD,aAtBS;AAuBVE,YAAAA,QAAQ,EAAE,oBAAY;AACpB,qBAAO7F,qBAAqB,CAAC6F,QAA7B;AACD,aAzBS;AA0BVC,YAAAA,YAAY,EAAE,wBAAY;AACxB,qBAAO9F,qBAAqB,CAAC8F,YAA7B;AACD;AA5BS,WAF8B;AAgC1CnB,UAAAA,oBAAoB,EAAE,IAAI9D,MAAM,CAAC+D,YAAX,CAAwB;AAC5CC,YAAAA,OAAO,EAAE,CAACkB,0BAAD;AADmC,WAAxB,CAhCoB;AAmC1ChB,UAAAA,aAAa,EAAE,KAAK9B,iBAAL,CAAuBM,sBAnCI;AAoC1CyB,UAAAA,UAAU,EAAE,sBAAY;AACtB;AACAX,YAAAA,IAAI,CAACC,UAAL,CAAgBf,sBAAhB,CAAuC0B,gBAAvC,CAAwDF,aAAxD,GAAwEV,IAAI,CAACpB,iBAAL,CAAuBM,sBAA/F;AACD;AAvCyC,SAApB,CAlGR;AA4IhBC,QAAAA,mBAAmB,EAAE,IAAIgB,eAAJ,CAAoB;AACvCC,UAAAA,WAAW,EAAE,SAD0B;AAEvCC,UAAAA,UAAU,EAAE;AACVnB,YAAAA,sBAAsB,EAAE,kCAAY;AAClC,qBAAOc,IAAI,CAACpB,iBAAL,CAAuBM,sBAA9B;AACD,aAHS;AAIVD,YAAAA,kBAAkB,EAAE,8BAAY;AAC9B,qBAAOe,IAAI,CAACpB,iBAAL,CAAuBK,kBAA9B;AACD;AANS,WAF2B;AAUvCqB,UAAAA,oBAAoB,EAAE,IAAI9D,MAAM,CAAC+D,YAAX,CAAwB;AAC5CC,YAAAA,OAAO,EAAE,CAACmB,uBAAD;AADmC,WAAxB,CAViB;AAavCjB,UAAAA,aAAa,EAAE,KAAK9B,iBAAL,CAAuBO,mBAbC;AAcvCwB,UAAAA,UAAU,EAAE,sBAAY;AACtB;AACAX,YAAAA,IAAI,CAACC,UAAL,CAAgBd,mBAAhB,CAAoCyB,gBAApC,CAAqDF,aAArD,GAAqEV,IAAI,CAACpB,iBAAL,CAAuBO,mBAA5F;AACD;AAjBsC,SAApB;AA5IL,OAAlB;AAgKD;;;;;;;;"}