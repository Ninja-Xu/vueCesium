{"version":3,"file":"index.js","sources":["src/components/control/navigation/icon/VcIconSvg.vue?rollup-plugin-vue=script.js","src/components/control/navigation/icon/VcIconSvg.vue","src/components/tool/drawHandlerPolygon/drawIcon.js","src/components/tool/drawHandlerPolygon/VcDrawHandlerPolygon.vue?rollup-plugin-vue=script.js","src/components/tool/drawHandlerPolygon/VcDrawHandlerPolygon.vue","src/components/tool/drawHandlerPolygon/index.js"],"sourcesContent":["//\n//\n//\n//\n\nconst icons = {}\nlet notLoadedIcons = []\nlet defaultWidth = ''\nlet defaultHeight = ''\nlet classPrefix = 'vc-svg'\nlet isStroke = false\nlet isOriginalDefault = false\n\nexport default {\n  name: 'svgicon',\n  data () {\n    return {\n      loaded: false\n    }\n  },\n  props: {\n    icon: String,\n    name: String,\n    width: {\n      type: String,\n      default: ''\n    },\n    height: {\n      type: String,\n      default: ''\n    },\n    scale: String,\n    dir: String,\n    fill: {\n      type: Boolean,\n      default: function () {\n        return !isStroke\n      }\n    },\n    color: String,\n    original: {\n      type: Boolean,\n      default: function () {\n        return isOriginalDefault\n      }\n    },\n    title: String\n  },\n\n  computed: {\n    clazz () {\n      let clazz = `${classPrefix}-icon`\n\n      if (this.fill) {\n        clazz += ` ${classPrefix}-fill`\n      }\n\n      if (this.dir) {\n        clazz += ` ${classPrefix}-${this.dir}`\n      }\n\n      return clazz\n    },\n\n    iconName () {\n      return this.name || this.icon\n    },\n\n    iconData () {\n      const iconData = icons[this.iconName]\n      if (iconData || this.loaded) {\n        return iconData\n      }\n\n      return null\n    },\n\n    colors () {\n      if (this.color) {\n        return this.color.split(' ')\n      }\n      return []\n    },\n\n    path () {\n      let pathData = ''\n      if (this.iconData) {\n        pathData = this.iconData.data\n\n        pathData = this.setTitle(pathData)\n\n        // use original color\n        if (this.original) {\n          pathData = this.addOriginalColor(pathData)\n        }\n\n        if (this.colors.length > 0) {\n          pathData = this.addColor(pathData)\n        }\n      } else {\n        // if no iconData, push to notLoadedIcons\n        notLoadedIcons.push({\n          name: this.iconName,\n          component: this\n        })\n      }\n\n      return this.getValidPathData(pathData)\n    },\n\n    box () {\n      const width = this.width || 16\n      const height = this.width || 16\n\n      if (this.iconData) {\n        if (this.iconData.viewBox) {\n          return this.iconData.viewBox\n        }\n        return `0 0 ${this.iconData.width} ${this.iconData.height}`\n      }\n\n      return `0 0 ${parseFloat(width)} ${parseFloat(height)}`\n    },\n\n    style () {\n      const digitReg = /^\\d+$/\n      const scale = Number(this.scale)\n      let width\n      let height\n\n      // apply scale\n      if (!isNaN(scale) && this.iconData) {\n        width = Number(this.iconData.width) * scale + 'px'\n        height = Number(this.iconData.height) * scale + 'px'\n      } else {\n        width = digitReg.test(this.width)\n          ? this.width + 'px'\n          : this.width || defaultWidth\n        height = digitReg.test(this.height)\n          ? this.height + 'px'\n          : this.height || defaultHeight\n      }\n\n      const style = {}\n\n      if (width) {\n        style.width = width\n      }\n\n      if (height) {\n        style.height = height\n      }\n      return style\n    }\n  },\n\n  created () {\n    if (icons[this.iconName]) {\n      this.loaded = true\n    }\n  },\n\n  methods: {\n    addColor (data) {\n      const reg = /<(path|rect|circle|polygon|line|polyline|ellipse)\\s/gi\n      let i = 0\n      return data.replace(reg, match => {\n        let color =\n          this.colors[i++] || this.colors[this.colors.length - 1]\n        let fill = this.fill\n\n        // if color is '_', ignore it\n        if (color && color === '_') {\n          return match\n        }\n\n        // if color start with 'r-', reverse the fill value\n        if (color && color.indexOf('r-') === 0) {\n          fill = !fill\n          color = color.split('r-')[1]\n        }\n\n        const style = fill ? 'fill' : 'stroke'\n        const reverseStyle = fill ? 'stroke' : 'fill'\n        return match + `${style}=\"${color}\" ${reverseStyle}=\"none\" `\n      })\n    },\n\n    addOriginalColor (data) {\n      const styleReg = /_fill=\"|_stroke=\"/gi\n      return data.replace(styleReg, styleName => {\n        return styleName && styleName.slice(1)\n      })\n    },\n\n    getValidPathData (pathData) {\n      // If use original and colors, clear double fill or stroke\n      if (this.original && this.colors.length > 0) {\n        // eslint-disable-next-line no-useless-escape\n        const reg = /<(path|rect|circle|polygon|line|polyline|ellipse)(\\sfill|\\sstroke)([=\"\\w\\s\\.\\-\\+#\\$\\&>]+)(fill|stroke)/gi\n        pathData = pathData.replace(reg, (match, p1, p2, p3, p4) => {\n          return `<${p1}${p2}${p3}_${p4}`\n        })\n      }\n\n      return pathData\n    },\n\n    setTitle (pathData) {\n      if (this.title) {\n        const title = this.title\n          // eslint-disable-next-line no-useless-escape\n          .replace(/\\</gi, '&lt;')\n          .replace(/>/gi, '&gt;')\n          .replace(/&/g, '&amp;')\n        return `<title>${title}</title>` + pathData\n      }\n      return pathData\n    },\n\n    onClick (e) {\n      this.$emit('click', e)\n    }\n  },\n\n  install (Vue, options = {}) {\n    const tagName = options.tagName || 'svgicon'\n\n    if (options.classPrefix) {\n      classPrefix = options.classPrefix\n    }\n\n    isStroke = !!options.isStroke\n    isOriginalDefault = !!options.isOriginalDefault\n\n    // default size\n    options.defaultWidth && (defaultWidth = options.defaultWidth)\n    options.defaultHeight && (defaultHeight = options.defaultHeight)\n\n    Vue.component(tagName, this)\n  },\n\n  // register icons\n  register (data) {\n    for (const name in data) {\n      if (!icons[name]) {\n        icons[name] = data[name]\n      }\n\n      // check new register icon is not loaded, and set loaded to true\n      notLoadedIcons = notLoadedIcons.filter((v, ix) => {\n        if (v.name === name) {\n          v.component.$set(v.component, 'loaded', true)\n        }\n\n        return v.name !== name\n      })\n    }\n  },\n\n  icons\n}\n","<template>\n  <svg :class=\"clazz\" :style=\"style\" :viewBox=\"box\" @click=\"onClick\" v-html=\"path\" version=\"1.1\" />\n</template>\n\n<script>\nconst icons = {}\nlet notLoadedIcons = []\nlet defaultWidth = ''\nlet defaultHeight = ''\nlet classPrefix = 'vc-svg'\nlet isStroke = false\nlet isOriginalDefault = false\n\nexport default {\n  name: 'svgicon',\n  data () {\n    return {\n      loaded: false\n    }\n  },\n  props: {\n    icon: String,\n    name: String,\n    width: {\n      type: String,\n      default: ''\n    },\n    height: {\n      type: String,\n      default: ''\n    },\n    scale: String,\n    dir: String,\n    fill: {\n      type: Boolean,\n      default: function () {\n        return !isStroke\n      }\n    },\n    color: String,\n    original: {\n      type: Boolean,\n      default: function () {\n        return isOriginalDefault\n      }\n    },\n    title: String\n  },\n\n  computed: {\n    clazz () {\n      let clazz = `${classPrefix}-icon`\n\n      if (this.fill) {\n        clazz += ` ${classPrefix}-fill`\n      }\n\n      if (this.dir) {\n        clazz += ` ${classPrefix}-${this.dir}`\n      }\n\n      return clazz\n    },\n\n    iconName () {\n      return this.name || this.icon\n    },\n\n    iconData () {\n      const iconData = icons[this.iconName]\n      if (iconData || this.loaded) {\n        return iconData\n      }\n\n      return null\n    },\n\n    colors () {\n      if (this.color) {\n        return this.color.split(' ')\n      }\n      return []\n    },\n\n    path () {\n      let pathData = ''\n      if (this.iconData) {\n        pathData = this.iconData.data\n\n        pathData = this.setTitle(pathData)\n\n        // use original color\n        if (this.original) {\n          pathData = this.addOriginalColor(pathData)\n        }\n\n        if (this.colors.length > 0) {\n          pathData = this.addColor(pathData)\n        }\n      } else {\n        // if no iconData, push to notLoadedIcons\n        notLoadedIcons.push({\n          name: this.iconName,\n          component: this\n        })\n      }\n\n      return this.getValidPathData(pathData)\n    },\n\n    box () {\n      const width = this.width || 16\n      const height = this.width || 16\n\n      if (this.iconData) {\n        if (this.iconData.viewBox) {\n          return this.iconData.viewBox\n        }\n        return `0 0 ${this.iconData.width} ${this.iconData.height}`\n      }\n\n      return `0 0 ${parseFloat(width)} ${parseFloat(height)}`\n    },\n\n    style () {\n      const digitReg = /^\\d+$/\n      const scale = Number(this.scale)\n      let width\n      let height\n\n      // apply scale\n      if (!isNaN(scale) && this.iconData) {\n        width = Number(this.iconData.width) * scale + 'px'\n        height = Number(this.iconData.height) * scale + 'px'\n      } else {\n        width = digitReg.test(this.width)\n          ? this.width + 'px'\n          : this.width || defaultWidth\n        height = digitReg.test(this.height)\n          ? this.height + 'px'\n          : this.height || defaultHeight\n      }\n\n      const style = {}\n\n      if (width) {\n        style.width = width\n      }\n\n      if (height) {\n        style.height = height\n      }\n      return style\n    }\n  },\n\n  created () {\n    if (icons[this.iconName]) {\n      this.loaded = true\n    }\n  },\n\n  methods: {\n    addColor (data) {\n      const reg = /<(path|rect|circle|polygon|line|polyline|ellipse)\\s/gi\n      let i = 0\n      return data.replace(reg, match => {\n        let color =\n          this.colors[i++] || this.colors[this.colors.length - 1]\n        let fill = this.fill\n\n        // if color is '_', ignore it\n        if (color && color === '_') {\n          return match\n        }\n\n        // if color start with 'r-', reverse the fill value\n        if (color && color.indexOf('r-') === 0) {\n          fill = !fill\n          color = color.split('r-')[1]\n        }\n\n        const style = fill ? 'fill' : 'stroke'\n        const reverseStyle = fill ? 'stroke' : 'fill'\n        return match + `${style}=\"${color}\" ${reverseStyle}=\"none\" `\n      })\n    },\n\n    addOriginalColor (data) {\n      const styleReg = /_fill=\"|_stroke=\"/gi\n      return data.replace(styleReg, styleName => {\n        return styleName && styleName.slice(1)\n      })\n    },\n\n    getValidPathData (pathData) {\n      // If use original and colors, clear double fill or stroke\n      if (this.original && this.colors.length > 0) {\n        // eslint-disable-next-line no-useless-escape\n        const reg = /<(path|rect|circle|polygon|line|polyline|ellipse)(\\sfill|\\sstroke)([=\"\\w\\s\\.\\-\\+#\\$\\&>]+)(fill|stroke)/gi\n        pathData = pathData.replace(reg, (match, p1, p2, p3, p4) => {\n          return `<${p1}${p2}${p3}_${p4}`\n        })\n      }\n\n      return pathData\n    },\n\n    setTitle (pathData) {\n      if (this.title) {\n        const title = this.title\n          // eslint-disable-next-line no-useless-escape\n          .replace(/\\</gi, '&lt;')\n          .replace(/>/gi, '&gt;')\n          .replace(/&/g, '&amp;')\n        return `<title>${title}</title>` + pathData\n      }\n      return pathData\n    },\n\n    onClick (e) {\n      this.$emit('click', e)\n    }\n  },\n\n  install (Vue, options = {}) {\n    const tagName = options.tagName || 'svgicon'\n\n    if (options.classPrefix) {\n      classPrefix = options.classPrefix\n    }\n\n    isStroke = !!options.isStroke\n    isOriginalDefault = !!options.isOriginalDefault\n\n    // default size\n    options.defaultWidth && (defaultWidth = options.defaultWidth)\n    options.defaultHeight && (defaultHeight = options.defaultHeight)\n\n    Vue.component(tagName, this)\n  },\n\n  // register icons\n  register (data) {\n    for (const name in data) {\n      if (!icons[name]) {\n        icons[name] = data[name]\n      }\n\n      // check new register icon is not loaded, and set loaded to true\n      notLoadedIcons = notLoadedIcons.filter((v, ix) => {\n        if (v.name === name) {\n          v.component.$set(v.component, 'loaded', true)\n        }\n\n        return v.name !== name\n      })\n    }\n  },\n\n  icons\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.vc-svg-icon {\n  display: block;\n}\n</style>\n","import VcIconSvg from '../../control/navigation/icon/VcIconSvg.vue'\nimport drawIcons from '../drawIcons'\nVcIconSvg.register(drawIcons)\n","//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport mixinDraw from '../../../mixins/tool/mixinDraw'\nimport { makeMaterial } from '../../../utils/cesiumHelpers'\nimport { clone } from '../../../utils/util'\nimport './drawIcon'\nimport VcIconSvg from '../../control/navigation/icon/VcIconSvg.vue'\n\nexport default {\n  name: 'vc-handler-draw-polygon',\n  mixins: [mixinDraw],\n  components: {\n    VcIconSvg\n  },\n  data () {\n    return {\n      drawType: 'polygonDrawing'\n    }\n  },\n  props: {\n    depthTest: {\n      type: Boolean,\n      default: true\n    },\n    perPositionHeight: {\n      type: Boolean,\n      default: true\n    },\n    polylineMaterial: {\n      type: Object,\n      default: () => {\n        return {\n          fabric: {\n            type: 'Color',\n            uniforms: {\n              color: '#51ff00'\n            }\n          }\n        }\n      }\n    },\n    polylineWidth: {\n      type: Number,\n      default: 2\n    },\n    polygonMaterial: {\n      type: Object,\n      default: () => {\n        return {\n          fabric: {\n            type: 'Color',\n            uniforms: {\n              color: 'rgba(255,165,0,0.25)'\n            }\n          }\n        }\n      }\n    },\n    clampToGround: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    primitivePolylines () {\n      const polylines = []\n      this.polylines.forEach((item, index) => {\n        const polyline = {\n          material: this.polylineMaterial,\n          positions: item.positions,\n          width: this.polylineWidth,\n          loop: true,\n          polylineIndex: index\n        }\n        polylines.push(polyline)\n      })\n      return polylines\n    }\n  },\n  methods: {\n    makeEllipsoidSurfaceAppearance (val) {\n      return new Cesium.EllipsoidSurfaceAppearance({\n        material: makeMaterial.call(this, val),\n        renderState: {\n          cull: {\n            enabled: false\n          }\n        }\n      })\n    },\n    makePolylineMaterialAppearance (val) {\n      return new Cesium.PolylineMaterialAppearance({\n        material: makeMaterial.call(this, val)\n      })\n    },\n    clone\n  }\n}\n","<template>\n  <i :class=\"$options.name\">\n    <vc-collection-primitive :show=\"show\">\n      <!-- 非贴地面 -->\n      <vc-collection-primitive ref=\"polygonCollection\" v-if=\"!clampToGround\">\n        <template v-for=\"(polyline, index) of polylines\">\n          <vc-primitive\n            :appearance=\"makeEllipsoidSurfaceAppearance(polygonMaterial)\"\n            :asynchronous=\"false\"\n            :key=\"index\"\n            v-if=\"polyline.positions.length > 2\"\n          >\n            <vc-instance-geometry>\n              <vc-geometry-polygon\n                :perPositionHeight=\"true\"\n                :polygonHierarchy=\"clone(polyline.positions, true)\"\n              ></vc-geometry-polygon>\n            </vc-instance-geometry>\n          </vc-primitive>\n        </template>\n      </vc-collection-primitive>\n      <!-- 贴地面 -->\n      <vc-collection-primitive ref=\"groundPolygonCollection\" v-else>\n        <template v-for=\"(polyline, index) of polylines\">\n          <vc-primitive-ground\n            :appearance=\"makeEllipsoidSurfaceAppearance(polygonMaterial)\"\n            :asynchronous=\"false\"\n            :key=\"index\"\n            v-if=\"polyline.positions.length > 2\"\n          >\n            <vc-instance-geometry>\n              <vc-geometry-polygon\n                :perPositionHeight=\"false\"\n                :polygonHierarchy=\"clone(polyline.positions, true)\"\n              ></vc-geometry-polygon>\n            </vc-instance-geometry>\n          </vc-primitive-ground>\n        </template>\n      </vc-collection-primitive>\n      <!-- 贴地线 -->\n      <vc-collection-primitive ref=\"groundPolylineCollection\" v-if=\"clampToGround\">\n        <template v-for=\"(polyline, index) of polylines\">\n          <vc-primitive-polyline-ground\n            :appearance=\"makePolylineMaterialAppearance(polylineMaterial)\"\n            :asynchronous=\"false\"\n            :key=\"index\"\n            v-if=\"polyline.positions.length > 1\"\n          >\n            <vc-instance-geometry>\n              <vc-geometry-polyline-ground\n                :positions=\"polyline.positions\"\n                :width=\"polylineWidth\"\n                loop\n              ></vc-geometry-polyline-ground>\n            </vc-instance-geometry>\n          </vc-primitive-polyline-ground>\n        </template>\n      </vc-collection-primitive>\n      <!-- 非贴地线 -->\n      <vc-collection-primitive-polyline ref=\"polylineCollection\" :polylines=\"primitivePolylines\" v-else>\n      </vc-collection-primitive-polyline>\n      <!-- 点 -->\n      <vc-collection-primitive-point ref=\"pointCollection\" :points=\"points\" @mouseover=\"pointMouseOver\" @mouseout=\"pointMouseOut\">\n      </vc-collection-primitive-point>\n    </vc-collection-primitive>\n    <vc-overlay-html :position=\"toolbarPosition\" v-if=\"showToolbar\">\n      <button :title=\"$vc.lang.draw.editingMove\" class=\"vc-btn\" type=\"button\" @click=\"onEditClick('move')\">\n        <vc-icon-svg name=\"icon-move\"></vc-icon-svg>\n      </button>\n      <button :title=\"$vc.lang.draw.editingInsert\" class=\"vc-btn\" type=\"button\" @click=\"onEditClick('insert')\">\n        <vc-icon-svg name=\"icon-add\"></vc-icon-svg>\n      </button>\n      <button :title=\"$vc.lang.draw.editingDelete\" class=\"vc-btn\" type=\"button\" @click=\"onEditClick('delete')\">\n        <vc-icon-svg name=\"icon-delete\"></vc-icon-svg>\n      </button>\n    </vc-overlay-html>\n    <vc-overlay-html :position=\"tooltipPosition\" v-if=\"showTooltip && showDrawTip\" :pixelOffset=\"[32, 32]\">\n      <div class=\"vc-html-bubble\">{{ tooltip }}</div>\n    </vc-overlay-html>\n  </i>\n</template>\n\n<script>\nimport mixinDraw from '../../../mixins/tool/mixinDraw'\nimport { makeMaterial } from '../../../utils/cesiumHelpers'\nimport { clone } from '../../../utils/util'\nimport './drawIcon'\nimport VcIconSvg from '../../control/navigation/icon/VcIconSvg.vue'\n\nexport default {\n  name: 'vc-handler-draw-polygon',\n  mixins: [mixinDraw],\n  components: {\n    VcIconSvg\n  },\n  data () {\n    return {\n      drawType: 'polygonDrawing'\n    }\n  },\n  props: {\n    depthTest: {\n      type: Boolean,\n      default: true\n    },\n    perPositionHeight: {\n      type: Boolean,\n      default: true\n    },\n    polylineMaterial: {\n      type: Object,\n      default: () => {\n        return {\n          fabric: {\n            type: 'Color',\n            uniforms: {\n              color: '#51ff00'\n            }\n          }\n        }\n      }\n    },\n    polylineWidth: {\n      type: Number,\n      default: 2\n    },\n    polygonMaterial: {\n      type: Object,\n      default: () => {\n        return {\n          fabric: {\n            type: 'Color',\n            uniforms: {\n              color: 'rgba(255,165,0,0.25)'\n            }\n          }\n        }\n      }\n    },\n    clampToGround: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    primitivePolylines () {\n      const polylines = []\n      this.polylines.forEach((item, index) => {\n        const polyline = {\n          material: this.polylineMaterial,\n          positions: item.positions,\n          width: this.polylineWidth,\n          loop: true,\n          polylineIndex: index\n        }\n        polylines.push(polyline)\n      })\n      return polylines\n    }\n  },\n  methods: {\n    makeEllipsoidSurfaceAppearance (val) {\n      return new Cesium.EllipsoidSurfaceAppearance({\n        material: makeMaterial.call(this, val),\n        renderState: {\n          cull: {\n            enabled: false\n          }\n        }\n      })\n    },\n    makePolylineMaterialAppearance (val) {\n      return new Cesium.PolylineMaterialAppearance({\n        material: makeMaterial.call(this, val)\n      })\n    },\n    clone\n  }\n}\n</script>\n","import VcDrawHandlerPolygon from './VcDrawHandlerPolygon.vue'\n// 按需引入该组件时自动引入下面组件才能正常工作\nimport * as PrimitiveCollection from '../../primitiveCollection'\nimport * as GroundPrimitive from '../../primitive/ground'\nimport * as GeometryInstance from '../../geometryInstance'\nimport * as PolygonGeometry from '../../geometryInstance/polygon'\nimport * as Primitive from '../../primitive'\nimport * as GroundPolylinePrimitive from '../../primitive/groundPolyline'\nimport * as GroundPolylineGeometry from '../../geometryInstance/groundPolyline'\nimport * as PolylineCollection from '../../primitiveCollection/polylineCollection'\nimport * as Polyline from '../../primitive/polyline'\nimport * as PointPrimitiveCollection from '../../primitiveCollection/pointCollection'\nimport * as PointPrimitive from '../../primitive/point'\nimport * as VcHTMLOverlay from '../../extend/htmlOverlay'\n\nfunction plugin (Vue, options = {}) {\n  if (plugin.installed) {\n    return\n  }\n  plugin.installed = true\n\n  Vue.use(PrimitiveCollection)\n  Vue.use(GroundPrimitive)\n  Vue.use(GeometryInstance)\n  Vue.use(PolygonGeometry)\n  Vue.use(Primitive)\n  Vue.use(GroundPolylinePrimitive)\n  Vue.use(GroundPolylineGeometry)\n  Vue.use(PolylineCollection)\n  Vue.use(Polyline)\n  Vue.use(PointPrimitiveCollection)\n  Vue.use(PointPrimitive)\n  Vue.use(VcHTMLOverlay)\n\n  Vue.component(VcDrawHandlerPolygon.name, VcDrawHandlerPolygon)\n}\n\nexport default plugin\n\nexport {\n  VcDrawHandlerPolygon,\n  plugin as install\n}\n"],"names":["icons","notLoadedIcons","defaultWidth","defaultHeight","classPrefix","isStroke","isOriginalDefault","name","data","loaded","props","icon","String","width","type","default","height","scale","dir","fill","Boolean","color","original","title","computed","clazz","iconName","iconData","colors","split","path","pathData","setTitle","addOriginalColor","length","addColor","push","component","getValidPathData","box","viewBox","style","digitReg","Number","isNaN","test","created","methods","reg","i","replace","match","indexOf","reverseStyle","styleReg","styleName","slice","p1","p2","p3","p4","onClick","e","$emit","install","Vue","options","tagName","register","filter","v","ix","$set","VcIconSvg","drawIcons","mixins","mixinDraw","components","drawType","depthTest","perPositionHeight","polylineMaterial","Object","fabric","uniforms","polylineWidth","polygonMaterial","clampToGround","primitivePolylines","polylines","forEach","item","index","polyline","material","positions","loop","polylineIndex","makeEllipsoidSurfaceAppearance","val","Cesium","EllipsoidSurfaceAppearance","makeMaterial","call","renderState","cull","enabled","makePolylineMaterialAppearance","PolylineMaterialAppearance","clone","plugin","installed","use","PrimitiveCollection","GroundPrimitive","GeometryInstance","PolygonGeometry","Primitive","GroundPolylinePrimitive","GroundPolylineGeometry","PolylineCollection","Polyline","PointPrimitiveCollection","PointPrimitive","VcHTMLOverlay","VcDrawHandlerPolygon"],"mappings":"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"}