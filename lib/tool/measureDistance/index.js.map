{"version":3,"file":"index.js","sources":["src/components/tool/measureDistance/VcMeasureDistance.vue?rollup-plugin-vue=script.js","src/components/tool/measureDistance/VcMeasureDistance.vue","src/components/tool/measureDistance/index.js"],"sourcesContent":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport mixinMeasure from '../../../mixins/tool/mixinMeasure'\nimport { makeMaterial } from '../../../utils/cesiumHelpers'\nexport default {\n  name: 'vc-measure-distance',\n  mixins: [mixinMeasure],\n  data () {\n    return {\n      type: 'distanceMeasuring',\n      measuring: false,\n      polylines: []\n    }\n  },\n  props: {\n    arcType: {\n      type: Number,\n      default: 0\n    },\n    clampToGround: {\n      type: Boolean,\n      default: false\n    },\n    alongLine: {\n      type: Boolean,\n      default: true\n    },\n    removeLastPosition: {\n      type: Boolean,\n      default: true\n    }\n  },\n  watch: {\n    clampToGround () {\n      const { getDistance, polylines } = this\n      polylines.forEach((polyline) => {\n        const distances = [0]\n        let totalDistance = 0\n        for (let i = 0; i < polyline.positions.length - 1; i++) {\n          const positions = [polyline.positions[i], polyline.positions[i + 1]]\n          const distance = getDistance(positions)\n          totalDistance += distance\n          distances.push(totalDistance)\n        }\n        polyline.distances = distances\n        polyline.distance = totalDistance\n      })\n    }\n  },\n  computed: {\n    primitivePolylines () {\n      const polylines = []\n      this.polylines.forEach((item, index) => {\n        const polyline = {\n          material: this.polylineMaterial,\n          positions: item.positions,\n          width: this.polylineWidth,\n          polylineIndex: index\n        }\n        polylines.push(polyline)\n      })\n      return polylines\n    },\n    labels () {\n      const labels = []\n      this.polylines.forEach((polyline, index) => {\n        polyline.positions.forEach((position, subIndex) => {\n          if (subIndex === polyline.positions.length - 1) {\n            const label = {\n              backgroundColor: this.backgroundColor,\n              fillColor: this.fillColor,\n              font: this.font,\n              labelStyle: this.labelStyle,\n              outlineColor: this.outlineColor,\n              outlineWidth: this.outlineWidth,\n              pixelOffset: this.pixelOffset,\n              position: position,\n              showBackground: this.showBackground,\n              disableDepthTestDistance: Cesium.SuperMapVersion ? 0 : Number.POSITIVE_INFINITY,\n              text: this.$vc.lang.measure.distance + ': ' + this.getDistanceText(polyline.distances[subIndex])\n            }\n            labels.push(label)\n          }\n          if (((subIndex !== polyline.positions.length - 1 && polyline.positions.length > 2 + subIndex) ||\n                (polyline.positions.length > 2 + subIndex ||\n                  (polyline.positions.length - 2 === subIndex && polyline.positions.length !== 2)) && this.alongLine)) {\n            const label = {\n              backgroundColor: this.backgroundColor,\n              fillColor: this.fillColor,\n              font: this.font,\n              horizontalOrigin: 0,\n              labelStyle: this.labelStyle,\n              outlineColor: this.outlineColor,\n              outlineWidth: this.outlineWidth,\n              pixelOffset: this.pixelOffset,\n              position: this.getMidPoistion(polyline.positions[subIndex], polyline.positions[subIndex + 1]),\n              showBackground: this.showBackground,\n              disableDepthTestDistance: Number.POSITIVE_INFINITY,\n              text: this.getDistanceText(polyline.distances[subIndex + 1] - polyline.distances[subIndex]),\n              verticalOrigin: 0\n            }\n            labels.push(label)\n          }\n        })\n      })\n      return labels\n    }\n  },\n  methods: {\n    getDistanceText (distance) {\n      return distance > 1000 ? (distance / 1000).toFixed(2) + 'km' : distance.toFixed(2) + 'm'\n    },\n    getMidPoistion (left, right) {\n      const { Cartesian3 } = Cesium\n      return Cartesian3.midpoint(left, right, new Cartesian3())\n    },\n    clear () {\n      this.polylines = []\n      this.measuring = false\n    },\n    makeAppearance (val) {\n      return new Cesium.PolylineMaterialAppearance({\n        material: makeMaterial.call(this, val)\n      })\n    }\n  }\n}\n","<template>\n  <i :class=\"$options.name\" style=\"display: none !important\">\n    <!-- 贴地 -->\n    <vc-collection-primitive ref=\"groundPolylineCollection\" v-if=\"clampToGround\">\n      <template v-for=\"(polyline, index) of polylines\">\n        <vc-primitive-polyline-ground\n          :appearance=\"makeAppearance(polylineMaterial)\"\n          :arcType=\"arcType\"\n          :asynchronous=\"false\"\n          :key=\"index\"\n          v-if=\"polyline.positions.length > 1\"\n        >\n          <vc-instance-geometry>\n            <vc-geometry-polyline-ground :positions=\"polyline.positions\" :width=\"polylineWidth\"></vc-geometry-polyline-ground>\n          </vc-instance-geometry>\n        </vc-primitive-polyline-ground>\n      </template>\n    </vc-collection-primitive>\n    <vc-collection-primitive-polyline ref=\"polylineCollection\" :polylines=\"primitivePolylines\" v-else></vc-collection-primitive-polyline>\n    <vc-collection-primitive-point ref=\"pointCollection\" :points=\"points\"></vc-collection-primitive-point>\n    <vc-collection-primitive-label ref=\"labelCollection\" :labels=\"labels\"></vc-collection-primitive-label>\n  </i>\n</template>\n<script>\nimport mixinMeasure from '../../../mixins/tool/mixinMeasure'\nimport { makeMaterial } from '../../../utils/cesiumHelpers'\nexport default {\n  name: 'vc-measure-distance',\n  mixins: [mixinMeasure],\n  data () {\n    return {\n      type: 'distanceMeasuring',\n      measuring: false,\n      polylines: []\n    }\n  },\n  props: {\n    arcType: {\n      type: Number,\n      default: 0\n    },\n    clampToGround: {\n      type: Boolean,\n      default: false\n    },\n    alongLine: {\n      type: Boolean,\n      default: true\n    },\n    removeLastPosition: {\n      type: Boolean,\n      default: true\n    }\n  },\n  watch: {\n    clampToGround () {\n      const { getDistance, polylines } = this\n      polylines.forEach((polyline) => {\n        const distances = [0]\n        let totalDistance = 0\n        for (let i = 0; i < polyline.positions.length - 1; i++) {\n          const positions = [polyline.positions[i], polyline.positions[i + 1]]\n          const distance = getDistance(positions)\n          totalDistance += distance\n          distances.push(totalDistance)\n        }\n        polyline.distances = distances\n        polyline.distance = totalDistance\n      })\n    }\n  },\n  computed: {\n    primitivePolylines () {\n      const polylines = []\n      this.polylines.forEach((item, index) => {\n        const polyline = {\n          material: this.polylineMaterial,\n          positions: item.positions,\n          width: this.polylineWidth,\n          polylineIndex: index\n        }\n        polylines.push(polyline)\n      })\n      return polylines\n    },\n    labels () {\n      const labels = []\n      this.polylines.forEach((polyline, index) => {\n        polyline.positions.forEach((position, subIndex) => {\n          if (subIndex === polyline.positions.length - 1) {\n            const label = {\n              backgroundColor: this.backgroundColor,\n              fillColor: this.fillColor,\n              font: this.font,\n              labelStyle: this.labelStyle,\n              outlineColor: this.outlineColor,\n              outlineWidth: this.outlineWidth,\n              pixelOffset: this.pixelOffset,\n              position: position,\n              showBackground: this.showBackground,\n              disableDepthTestDistance: Cesium.SuperMapVersion ? 0 : Number.POSITIVE_INFINITY,\n              text: this.$vc.lang.measure.distance + ': ' + this.getDistanceText(polyline.distances[subIndex])\n            }\n            labels.push(label)\n          }\n          if (((subIndex !== polyline.positions.length - 1 && polyline.positions.length > 2 + subIndex) ||\n                (polyline.positions.length > 2 + subIndex ||\n                  (polyline.positions.length - 2 === subIndex && polyline.positions.length !== 2)) && this.alongLine)) {\n            const label = {\n              backgroundColor: this.backgroundColor,\n              fillColor: this.fillColor,\n              font: this.font,\n              horizontalOrigin: 0,\n              labelStyle: this.labelStyle,\n              outlineColor: this.outlineColor,\n              outlineWidth: this.outlineWidth,\n              pixelOffset: this.pixelOffset,\n              position: this.getMidPoistion(polyline.positions[subIndex], polyline.positions[subIndex + 1]),\n              showBackground: this.showBackground,\n              disableDepthTestDistance: Number.POSITIVE_INFINITY,\n              text: this.getDistanceText(polyline.distances[subIndex + 1] - polyline.distances[subIndex]),\n              verticalOrigin: 0\n            }\n            labels.push(label)\n          }\n        })\n      })\n      return labels\n    }\n  },\n  methods: {\n    getDistanceText (distance) {\n      return distance > 1000 ? (distance / 1000).toFixed(2) + 'km' : distance.toFixed(2) + 'm'\n    },\n    getMidPoistion (left, right) {\n      const { Cartesian3 } = Cesium\n      return Cartesian3.midpoint(left, right, new Cartesian3())\n    },\n    clear () {\n      this.polylines = []\n      this.measuring = false\n    },\n    makeAppearance (val) {\n      return new Cesium.PolylineMaterialAppearance({\n        material: makeMaterial.call(this, val)\n      })\n    }\n  }\n}\n</script>\n","import VcMeasureDistance from './VcMeasureDistance.vue'\n// 按需引入该组件时自动引入下面组件才能正常工作\nimport * as PrimitiveCollection from '../../primitiveCollection'\nimport * as GroundPolylinePrimitive from '../../primitive/groundPolyline'\nimport * as GeometryInstance from '../../geometryInstance'\nimport * as GroundPolylineGeometry from '../../geometryInstance/groundPolyline'\nimport * as PolylineCollection from '../../primitiveCollection/polylineCollection'\nimport * as Polyline from '../../primitive/polyline'\nimport * as PointPrimitiveCollection from '../../primitiveCollection/pointCollection'\nimport * as PointPrimitive from '../../primitive/point'\nimport * as LabelCollection from '../../primitiveCollection/labelCollection'\nimport * as Label from '../../primitive/label'\n\nfunction plugin (Vue, options = {}) {\n  if (plugin.installed) {\n    return\n  }\n  plugin.installed = true\n\n  Vue.use(PrimitiveCollection)\n  Vue.use(GeometryInstance)\n  Vue.use(GroundPolylinePrimitive)\n  Vue.use(GroundPolylineGeometry)\n  Vue.use(PolylineCollection)\n  Vue.use(Polyline)\n  Vue.use(PointPrimitiveCollection)\n  Vue.use(PointPrimitive)\n  Vue.use(LabelCollection)\n  Vue.use(Label)\n\n  Vue.component(VcMeasureDistance.name, VcMeasureDistance)\n}\n\nexport default plugin\n\nexport {\n  VcMeasureDistance,\n  plugin as install\n}\n"],"names":["name","mixins","mixinMeasure","data","type","measuring","polylines","props","arcType","Number","default","clampToGround","Boolean","alongLine","removeLastPosition","watch","getDistance","forEach","polyline","distances","totalDistance","i","positions","length","distance","push","computed","primitivePolylines","item","index","material","polylineMaterial","width","polylineWidth","polylineIndex","labels","position","subIndex","label","backgroundColor","fillColor","font","labelStyle","outlineColor","outlineWidth","pixelOffset","showBackground","disableDepthTestDistance","Cesium","SuperMapVersion","POSITIVE_INFINITY","text","$vc","lang","measure","getDistanceText","horizontalOrigin","getMidPoistion","verticalOrigin","methods","toFixed","left","right","Cartesian3","midpoint","clear","makeAppearance","val","PolylineMaterialAppearance","makeMaterial","call","plugin","Vue","installed","use","PrimitiveCollection","GeometryInstance","GroundPolylinePrimitive","GroundPolylineGeometry","PolylineCollection","Polyline","PointPrimitiveCollection","PointPrimitive","LabelCollection","Label","component","VcMeasureDistance"],"mappings":"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"}